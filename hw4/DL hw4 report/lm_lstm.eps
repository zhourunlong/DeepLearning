%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: curves.pdf
%%Creator: Adobe Acrobat 20.6.0
%%For: Vector Zhou
%%CreationDate: 2021/5/14, 19:45:20
%%BoundingBox: 0 0 418 211
%%HiResBoundingBox: 0 0 417.7154 210.1983
%%CropBox: 0 0 417.7154 210.1983
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1414 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:ModifyDate="2021-05-14T19:43:49+08:00"
   xmp:CreateDate="2021-05-14T19:43:48+08:00"
   xmp:MetadataDate="2021-05-14T19:43:49+08:00"
   xmp:CreatorTool="Acrobat PDFMaker 20 Word 版"
   xmpMM:DocumentID="uuid:a98aa018-d8c3-4433-aff5-56c1901a5dc8"
   xmpMM:InstanceID="uuid:cee1a58f-dbfc-4a12-a32e-05d0d292406f"
   dc:format="application/pdf"
   pdf:Producer="Adobe PDF Library 20.6.74"
   pdf:Keywords=""
   pdfx:SourceModified="D:20210514114339"
   pdfx:Company=""
   pdfx:Comments="">
   <xmpMM:subject>
    <rdf:Seq>
     <rdf:li>2</rdf:li>
    </rdf:Seq>
   </xmpMM:subject>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>周 润龙</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -210.198 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-5 0 mo
1.52588e-5 210.198 li
417.715 210.198 li
417.715 0 li
cp
clp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: DVYUMU+DengXian-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (DVYUMU+DengXian-GBK-EUC-H)
%%Title: (DVYUMU+DengXian-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /DVYUMU+DengXian-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-141 -253 1151 954} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 29235 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 8 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
28639 <001C60D8A8C9B74B0CB5DF6C84CF353B772D85B4038C184407812FD2> |
28672 <001C60D8A8C9B6BC88CCA209E81BBB23118C1962F78530A6D2B1B22F4
C42E1E1780F3FAF3BA4D143D7AB9094600FB0A392F35595463AF65F814F8CFD2
FA68D1EBD08F24F882D398540EABDE5E14F3ED20707C55D17AFC142A349177EF
446C8B5CD5246C1A25D9E29ACD913B3DA4DA32F40D6AB2427E526FB3DBDEFA1C
762999B6CB00C8AB4BD2941F9E463EC30C1D40E11263ED534E30DB477FDAFCEB
E27BF40CE00> |
28595 <001C60D8A8C9B8581AA5> |
28671 <001C60D8A8C9B88A65BA90E56DAA1E3841575CB45590D6> |
28678 <001C60D8A8C9B70582CC565B4883086947A53D700FC22CC37B8FFB6B8
A85AF70378C60D0C6B0C2EF31395945EDFB7DDDE1D0CC898F5B0E9FE9A7A1C3A
4C1BB863EE6725F120C3FDCDE3A35D1AD416BA23B64066650F85DCA6BABE2743
5AEFC317463C12AE039762DAEB1FA885BDDABB217799AFC3B5D24F6EB793F0F5
A070427208AF010078BB18257D47DFD185F390ACEF5FCC7BCA93E3E3197F813A
1D3153232223F7C7C1200BBEA57795F95EDA23BD6ECCB2B42F454E44B3FFBA32
4E2485F90A1F8549AFBDBA375D3F087391D68792DB8B3268EAA6F0D> |
28679 <001C60D8A8C9B82C91E1D9CCF2FA7601C6026EBD33736DF344E87F732
E6204D98A966E57A2BEBF7AABB5C82E1C8966BD3BF60CBD042BFA41F5E6D694B
02FA7FC2341B98FA0788772F503A3DD89703A16E741DB3660B5C616> |
28646 <001C60D8A8C9B7B9B9DE69CBC96F0B5A3AE98D065C1FD7CFAD83FC43F
1290F4F9D34982C14CC513501F9076D4F8907F22AC9522F2896E944B1C90ABCE
1EBF569BE3E67D6DCC89DBF0C52716419D51E2AEFADD36CC19C82AD0FC3F3BA6
123D0BD3A2ABA4E110BF677253E952D076F531E23520FFA1895776A2199512FA
C9BD1336F7E1C8EDFA463D40ADCD492ED3B75F11D80658BD7ABA38DAF43CCBA2
32FE248B15967CE3B652AF643FE11F6C5568129285AEA24CD260CD6D81E569EF
64502ECAABE996CCD635CCC94E3C711D5E8195F3A715AF8260F36A77EC1CE55F
17D20D8E151C2> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /DVYUMU+DengXian-GBK-EUC-H-Identity-H /Identity-H 0 [/DVYUMU+DengXian-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/DVYUMU+DengXian-GBK-EUC-H-Identity-H findfont [10.56 0 0 -10.56 0 0 ]msf
1.25562 -8.62549 mo
(o\337)sh
6.06042 -8.62549 mo
(p\000)sh
14.9414 -8.62549 mo
(o\263)sh
17.8243 -8.62549 mo
(o\377p\006p\007p\000)
[2.40028 4.32016 3.35801 0 ]xsh
36.5471 -8.62549 mo
(o\263)sh
416.707 209.776 mo
(o\263)sh
1.26617 225.374 mo
(o\263)sh
1.26617 240.971 mo
(o\346)sh
6.78905 240.971 mo
(o\263)sh
9.67194 240.971 mo
(o\377p\006p\007p\000)
[2.40028 4.32016 3.35801 0 ]xsh
28.3948 240.971 mo
(o\263)sh
416.718 459.373 mo
(o\263)sh
1.27673 474.97 mo
(o\263)sh
%ADOBeginSubsetFont: DVYUMV+MS-Gothic-90ms-RKSJ-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (DVYUMV+MS-Gothic-90ms-RKSJ-H)
%%Title: (DVYUMV+MS-Gothic-90ms-RKSJ-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /DVYUMV+MS-Gothic-90ms-RKSJ-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-977 -137 996 859} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 22291 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31034E24209ACF89168A7F0C931174AA1E57ECA02C241
56D6B435A6E3F8C05> |
3 <001C60D8A8C9B7A73D40> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /DVYUMV+MS-Gothic-90ms-RKSJ-H-Identity-H /Identity-H 0 [/DVYUMV+MS-Gothic-90ms-RKSJ-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/DVYUMV+MS-Gothic-90ms-RKSJ-H-Identity-H findfont [10.56 0 0 -10.56 0 0 ]msf
1.27673 490.567 mo
(\000\003)sh
/DVYUMU+DengXian-GBK-EUC-H-Identity-H findfont [10.56 0 0 -10.56 0 0 ]msf
145.273 490.567 mo
(o\263)sh
1.25562 1.12354 mo
416.556 1.12354 li
416.556 208.774 li
1.25562 208.774 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.75 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
42.1631 125.294 mo
366.168 125.294 li
42.1631 106.575 mo
366.168 106.575 li
42.1631 87.6145 mo
366.168 87.6145 li
42.1631 68.6545 mo
366.168 68.6545 li
42.1631 49.9345 mo
366.168 49.9345 li
42.1631 30.9745 mo
366.168 30.9745 li
42.1631 12.1235 mo
366.168 12.1235 li
1 /0 /CSD get_res sepcs
.149 sep
@
119.336 12.1233 mo
119.336 144.207 li
196.376 12.1233 mo
196.376 144.207 li
273.656 12.1233 mo
273.656 144.207 li
350.74 12.1233 mo
350.74 144.207 li
@
366.168 144.207 mo
366.168 12.1231 li
1 /0 /CSD get_res sepcs
.251 sep
@
366.168 144.207 mo
368.598 144.207 li
366.168 122.174 mo
368.598 122.174 li
366.168 100.094 mo
368.598 100.094 li
366.168 78.2541 mo
368.598 78.2541 li
366.168 56.1741 mo
368.598 56.1741 li
366.168 34.0941 mo
368.598 34.0941 li
366.168 12.1231 mo
368.598 12.1231 li
@
42.1631 144.207 mo
42.1631 12.1231 li
@
42.1631 144.207 mo
366.168 144.207 li
@
1.5 lw
1 lc
57.5919 23.4963 mo
62.7349 26.2483 67.8779 29.8473 73.0209 31.7533 cv
78.1639 33.6583 83.3069 33.4303 88.4499 34.9303 cv
93.5929 36.4303 98.7349 39.0463 103.878 40.7513 cv
109.021 42.4573 114.164 43.8403 119.307 45.1633 cv
124.45 46.4863 129.593 47.5823 134.736 48.6893 cv
139.879 49.7973 145.022 50.8213 150.165 51.8093 cv
155.308 52.7963 160.451 53.7213 165.594 54.6143 cv
170.737 55.5073 175.879 56.3533 181.022 57.1663 cv
186.165 57.9792 191.308 58.7493 196.451 59.4903 cv
201.594 60.2323 206.737 60.9433 211.88 61.6163 cv
217.023 62.2883 222.166 62.9323 227.309 63.5262 cv
232.452 64.1213 237.595 64.6623 242.738 65.1823 cv
247.881 65.7023 253.024 66.1823 258.167 66.6443 cv
263.309 67.1073 268.452 67.5363 273.595 67.9573 cv
278.738 68.3773 283.881 68.7773 289.024 69.1653 cv
294.167 69.5522 299.31 69.9193 304.453 70.2813 cv
309.596 70.6432 314.739 70.9933 319.882 71.3353 cv
325.025 71.6783 330.168 72.0113 335.311 72.3373 cv
340.454 72.6633 345.596 72.9743 350.739 73.2933 cv
/1 
[/DeviceCMYK] /CSA add_res
.765011 .551873 0 0 cmyk
@
59.9356 23.3234 mo
59.9356 24.6484 58.8606 25.7234 57.5356 25.7234 cv
56.2106 25.7234 55.1356 24.6484 55.1356 23.3234 cv
55.1356 21.9974 56.2106 20.9234 57.5356 20.9234 cv
58.8606 20.9234 59.9356 21.9974 59.9356 23.3234 cv
f
.75 lw
0 lc
59.9356 23.3234 mo
59.9356 24.6484 58.8606 25.7234 57.5356 25.7234 cv
56.2106 25.7234 55.1356 24.6484 55.1356 23.3234 cv
55.1356 21.9974 56.2106 20.9234 57.5356 20.9234 cv
58.8606 20.9234 59.9356 21.9974 59.9356 23.3234 cv
cp
@
75.5356 31.7234 mo
75.5356 33.0484 74.4606 34.1234 73.1356 34.1234 cv
71.8106 34.1234 70.7356 33.0484 70.7356 31.7234 cv
70.7356 30.3974 71.8106 29.3234 73.1356 29.3234 cv
74.4606 29.3234 75.5356 30.3974 75.5356 31.7234 cv
f
75.5356 31.7234 mo
75.5356 33.0484 74.4606 34.1234 73.1356 34.1234 cv
71.8106 34.1234 70.7356 33.0484 70.7356 31.7234 cv
70.7356 30.3974 71.8106 29.3234 73.1356 29.3234 cv
74.4606 29.3234 75.5356 30.3974 75.5356 31.7234 cv
cp
@
90.8956 34.8434 mo
90.8956 36.1684 89.8206 37.2434 88.4956 37.2434 cv
87.1706 37.2434 86.0956 36.1684 86.0956 34.8434 cv
86.0956 33.5174 87.1706 32.4434 88.4956 32.4434 cv
89.8206 32.4434 90.8956 33.5174 90.8956 34.8434 cv
f
90.8956 34.8434 mo
90.8956 36.1684 89.8206 37.2434 88.4956 37.2434 cv
87.1706 37.2434 86.0956 36.1684 86.0956 34.8434 cv
86.0956 33.5174 87.1706 32.4434 88.4956 32.4434 cv
89.8206 32.4434 90.8956 33.5174 90.8956 34.8434 cv
cp
@
106.256 40.6033 mo
106.256 41.9283 105.181 43.0034 103.856 43.0034 cv
102.531 43.0034 101.456 41.9283 101.456 40.6033 cv
101.456 39.2773 102.531 38.2033 103.856 38.2033 cv
105.181 38.2033 106.256 39.2773 106.256 40.6033 cv
f
106.256 40.6033 mo
106.256 41.9283 105.181 43.0034 103.856 43.0034 cv
102.531 43.0034 101.456 41.9283 101.456 40.6033 cv
101.456 39.2773 102.531 38.2033 103.856 38.2033 cv
105.181 38.2033 106.256 39.2773 106.256 40.6033 cv
cp
@
121.616 45.1633 mo
121.616 46.4883 120.541 47.5634 119.216 47.5634 cv
117.891 47.5634 116.816 46.4883 116.816 45.1633 cv
116.816 43.8373 117.891 42.7633 119.216 42.7633 cv
120.541 42.7633 121.616 43.8373 121.616 45.1633 cv
f
121.616 45.1633 mo
121.616 46.4883 120.541 47.5634 119.216 47.5634 cv
117.891 47.5634 116.816 46.4883 116.816 45.1633 cv
116.816 43.8373 117.891 42.7633 119.216 42.7633 cv
120.541 42.7633 121.616 43.8373 121.616 45.1633 cv
cp
@
137.216 48.5234 mo
137.216 49.8484 136.141 50.9234 134.816 50.9234 cv
133.491 50.9234 132.416 49.8484 132.416 48.5234 cv
132.416 47.1974 133.491 46.1234 134.816 46.1234 cv
136.141 46.1234 137.216 47.1974 137.216 48.5234 cv
f
137.216 48.5233 mo
137.216 49.8483 136.141 50.9233 134.816 50.9233 cv
133.491 50.9233 132.416 49.8483 132.416 48.5233 cv
132.416 47.1973 133.491 46.1233 134.816 46.1233 cv
136.141 46.1233 137.216 47.1973 137.216 48.5233 cv
cp
@
152.576 51.6432 mo
152.576 52.9682 151.501 54.0432 150.176 54.0432 cv
148.851 54.0432 147.776 52.9682 147.776 51.6432 cv
147.776 50.3172 148.851 49.2432 150.176 49.2432 cv
151.501 49.2432 152.576 50.3172 152.576 51.6432 cv
f
152.576 51.6433 mo
152.576 52.9683 151.501 54.0433 150.176 54.0433 cv
148.851 54.0433 147.776 52.9683 147.776 51.6433 cv
147.776 50.3173 148.851 49.2433 150.176 49.2433 cv
151.501 49.2433 152.576 50.3173 152.576 51.6433 cv
cp
@
167.936 54.5234 mo
167.936 55.8484 166.861 56.9234 165.536 56.9234 cv
164.211 56.9234 163.136 55.8484 163.136 54.5234 cv
163.136 53.1974 164.211 52.1234 165.536 52.1234 cv
166.861 52.1234 167.936 53.1974 167.936 54.5234 cv
f
167.936 54.5233 mo
167.936 55.8483 166.861 56.9233 165.536 56.9233 cv
164.211 56.9233 163.136 55.8483 163.136 54.5233 cv
163.136 53.1973 164.211 52.1233 165.536 52.1233 cv
166.861 52.1233 167.936 53.1973 167.936 54.5233 cv
cp
@
183.536 57.1632 mo
183.536 58.4882 182.461 59.5632 181.136 59.5632 cv
179.811 59.5632 178.736 58.4882 178.736 57.1632 cv
178.736 55.8372 179.811 54.7632 181.136 54.7632 cv
182.461 54.7632 183.536 55.8372 183.536 57.1632 cv
f
183.536 57.1632 mo
183.536 58.4882 182.461 59.5632 181.136 59.5632 cv
179.811 59.5632 178.736 58.4882 178.736 57.1632 cv
178.736 55.8372 179.811 54.7632 181.136 54.7632 cv
182.461 54.7632 183.536 55.8372 183.536 57.1632 cv
cp
@
198.896 59.3232 mo
198.896 60.6482 197.821 61.7232 196.496 61.7232 cv
195.171 61.7232 194.096 60.6482 194.096 59.3232 cv
194.096 57.9972 195.171 56.9232 196.496 56.9232 cv
197.821 56.9232 198.896 57.9972 198.896 59.3232 cv
f
198.896 59.3232 mo
198.896 60.6482 197.821 61.7232 196.496 61.7232 cv
195.171 61.7232 194.096 60.6482 194.096 59.3232 cv
194.096 57.9972 195.171 56.9232 196.496 56.9232 cv
197.821 56.9232 198.896 57.9972 198.896 59.3232 cv
cp
@
214.256 61.4832 mo
214.256 62.8082 213.181 63.8832 211.856 63.8832 cv
210.531 63.8832 209.456 62.8082 209.456 61.4832 cv
209.456 60.1572 210.531 59.0832 211.856 59.0832 cv
213.181 59.0832 214.256 60.1572 214.256 61.4832 cv
f
214.256 61.4832 mo
214.256 62.8082 213.181 63.8832 211.856 63.8832 cv
210.531 63.8832 209.456 62.8082 209.456 61.4832 cv
209.456 60.1572 210.531 59.0832 211.856 59.0832 cv
213.181 59.0832 214.256 60.1572 214.256 61.4832 cv
cp
@
229.616 63.4032 mo
229.616 64.7282 228.541 65.8032 227.216 65.8032 cv
225.891 65.8032 224.816 64.7282 224.816 63.4032 cv
224.816 62.0772 225.891 61.0032 227.216 61.0032 cv
228.541 61.0032 229.616 62.0772 229.616 63.4032 cv
f
229.616 63.4032 mo
229.616 64.7282 228.541 65.8032 227.216 65.8032 cv
225.891 65.8032 224.816 64.7282 224.816 63.4032 cv
224.816 62.0772 225.891 61.0032 227.216 61.0032 cv
228.541 61.0032 229.616 62.0772 229.616 63.4032 cv
cp
@
245.216 65.0832 mo
245.216 66.4082 244.141 67.4832 242.816 67.4832 cv
241.491 67.4832 240.416 66.4082 240.416 65.0832 cv
240.416 63.7572 241.491 62.6832 242.816 62.6832 cv
244.141 62.6832 245.216 63.7572 245.216 65.0832 cv
f
245.216 65.0833 mo
245.216 66.4083 244.141 67.4833 242.816 67.4833 cv
241.491 67.4833 240.416 66.4083 240.416 65.0833 cv
240.416 63.7573 241.491 62.6833 242.816 62.6833 cv
244.141 62.6833 245.216 63.7573 245.216 65.0833 cv
cp
@
260.576 66.5233 mo
260.576 67.8483 259.501 68.9233 258.176 68.9233 cv
256.851 68.9233 255.776 67.8483 255.776 66.5233 cv
255.776 65.1973 256.851 64.1233 258.176 64.1233 cv
259.501 64.1233 260.576 65.1973 260.576 66.5233 cv
f
260.576 66.5233 mo
260.576 67.8483 259.501 68.9233 258.176 68.9233 cv
256.851 68.9233 255.776 67.8483 255.776 66.5233 cv
255.776 65.1973 256.851 64.1233 258.176 64.1233 cv
259.501 64.1233 260.576 65.1973 260.576 66.5233 cv
cp
@
275.936 67.9634 mo
275.936 69.2884 274.861 70.3634 273.536 70.3634 cv
272.211 70.3634 271.136 69.2884 271.136 67.9634 cv
271.136 66.6374 272.211 65.5634 273.536 65.5634 cv
274.861 65.5634 275.936 66.6374 275.936 67.9634 cv
f
275.936 67.9633 mo
275.936 69.2883 274.861 70.3633 273.536 70.3633 cv
272.211 70.3633 271.136 69.2883 271.136 67.9633 cv
271.136 66.6373 272.211 65.5633 273.536 65.5633 cv
274.861 65.5633 275.936 66.6373 275.936 67.9633 cv
cp
@
291.536 69.1632 mo
291.536 70.4882 290.461 71.5632 289.136 71.5632 cv
287.811 71.5632 286.736 70.4882 286.736 69.1632 cv
286.736 67.8372 287.811 66.7632 289.136 66.7632 cv
290.461 66.7632 291.536 67.8372 291.536 69.1632 cv
f
291.536 69.1632 mo
291.536 70.4882 290.461 71.5632 289.136 71.5632 cv
287.811 71.5632 286.736 70.4882 286.736 69.1632 cv
286.736 67.8372 287.811 66.7632 289.136 66.7632 cv
290.461 66.7632 291.536 67.8372 291.536 69.1632 cv
cp
@
306.896 70.1232 mo
306.896 71.4482 305.821 72.5233 304.496 72.5233 cv
303.171 72.5233 302.096 71.4482 302.096 70.1232 cv
302.096 68.7972 303.171 67.7232 304.496 67.7232 cv
305.821 67.7232 306.896 68.7972 306.896 70.1232 cv
f
306.896 70.1232 mo
306.896 71.4482 305.821 72.5233 304.496 72.5233 cv
303.171 72.5233 302.096 71.4482 302.096 70.1232 cv
302.096 68.7972 303.171 67.7232 304.496 67.7232 cv
305.821 67.7232 306.896 68.7972 306.896 70.1232 cv
cp
@
322.256 71.3232 mo
322.256 72.6482 321.181 73.7232 319.856 73.7232 cv
318.531 73.7232 317.456 72.6482 317.456 71.3232 cv
317.456 69.9972 318.531 68.9232 319.856 68.9232 cv
321.181 68.9232 322.256 69.9972 322.256 71.3232 cv
f
322.256 71.3232 mo
322.256 72.6482 321.181 73.7232 319.856 73.7232 cv
318.531 73.7232 317.456 72.6482 317.456 71.3232 cv
317.456 69.9972 318.531 68.9232 319.856 68.9232 cv
321.181 68.9232 322.256 69.9972 322.256 71.3232 cv
cp
@
337.616 72.2832 mo
337.616 73.6082 336.541 74.6832 335.216 74.6832 cv
333.891 74.6832 332.816 73.6082 332.816 72.2832 cv
332.816 70.9572 333.891 69.8832 335.216 69.8832 cv
336.541 69.8832 337.616 70.9572 337.616 72.2832 cv
f
337.616 72.2832 mo
337.616 73.6082 336.541 74.6832 335.216 74.6832 cv
333.891 74.6832 332.816 73.6082 332.816 72.2832 cv
332.816 70.9572 333.891 69.8832 335.216 69.8832 cv
336.541 69.8832 337.616 70.9572 337.616 72.2832 cv
cp
@
353.216 73.2432 mo
353.216 74.5682 352.141 75.6432 350.816 75.6432 cv
349.491 75.6432 348.416 74.5682 348.416 73.2432 cv
348.416 71.9172 349.491 70.8432 350.816 70.8432 cv
352.141 70.8432 353.216 71.9172 353.216 73.2432 cv
f
353.216 73.2432 mo
353.216 74.5682 352.141 75.6432 350.816 75.6432 cv
349.491 75.6432 348.416 74.5682 348.416 73.2432 cv
348.416 71.9172 349.491 70.8432 350.816 70.8432 cv
352.141 70.8432 353.216 71.9172 353.216 73.2432 cv
cp
@
1.5 lw
1 lc
57.5919 28.7613 mo
62.7349 29.5593 67.8779 30.0573 73.0209 31.1563 cv
78.1639 32.2553 83.3069 33.8253 88.4499 35.3553 cv
93.5929 36.8863 98.7349 38.9143 103.878 40.3393 cv
109.021 41.7633 114.164 42.7783 119.307 43.9043 cv
124.45 45.0293 129.593 46.1403 134.736 47.0913 cv
139.879 48.0433 145.022 48.8063 150.165 49.6123 cv
155.308 50.4183 160.451 51.2133 165.594 51.9283 cv
170.737 52.6423 175.879 53.2833 181.022 53.8993 cv
186.165 54.5143 191.308 55.1403 196.451 55.6223 cv
201.594 56.1043 206.737 56.4023 211.88 56.7893 cv
217.023 57.1763 222.166 57.6283 227.309 57.9443 cv
232.452 58.2613 237.595 58.4543 242.738 58.6863 cv
247.881 58.9183 253.024 59.1803 258.167 59.3353 cv
263.309 59.4893 268.452 59.5053 273.595 59.6153 cv
278.738 59.7253 283.881 59.9053 289.024 59.9963 cv
294.167 60.0873 299.31 60.1173 304.453 60.1613 cv
309.596 60.2043 314.739 60.2343 319.882 60.2573 cv
325.025 60.2813 330.168 60.3043 335.311 60.3013 cv
340.454 60.2983 345.596 60.2603 350.739 60.2393 cv
.0326238 .622919 .92285 .000610361 cmyk
@
59.9356 28.6034 mo
59.9356 29.9284 58.8606 31.0034 57.5356 31.0034 cv
56.2106 31.0034 55.1356 29.9284 55.1356 28.6034 cv
55.1356 27.2774 56.2106 26.2034 57.5356 26.2034 cv
58.8606 26.2034 59.9356 27.2774 59.9356 28.6034 cv
f
.75 lw
0 lc
59.9356 28.6034 mo
59.9356 29.9284 58.8606 31.0034 57.5356 31.0034 cv
56.2106 31.0034 55.1356 29.9284 55.1356 28.6034 cv
55.1356 27.2774 56.2106 26.2034 57.5356 26.2034 cv
58.8606 26.2034 59.9356 27.2774 59.9356 28.6034 cv
cp
@
75.5356 31.0034 mo
75.5356 32.3284 74.4606 33.4034 73.1356 33.4034 cv
71.8106 33.4034 70.7356 32.3284 70.7356 31.0034 cv
70.7356 29.6774 71.8106 28.6034 73.1356 28.6034 cv
74.4606 28.6034 75.5356 29.6774 75.5356 31.0034 cv
f
75.5356 31.0034 mo
75.5356 32.3284 74.4606 33.4034 73.1356 33.4034 cv
71.8106 33.4034 70.7356 32.3284 70.7356 31.0034 cv
70.7356 29.6774 71.8106 28.6034 73.1356 28.6034 cv
74.4606 28.6034 75.5356 29.6774 75.5356 31.0034 cv
cp
@
90.8956 35.3234 mo
90.8956 36.6484 89.8206 37.7234 88.4956 37.7234 cv
87.1706 37.7234 86.0956 36.6484 86.0956 35.3234 cv
86.0956 33.9974 87.1706 32.9234 88.4956 32.9234 cv
89.8206 32.9234 90.8956 33.9974 90.8956 35.3234 cv
f
90.8956 35.3234 mo
90.8956 36.6484 89.8206 37.7234 88.4956 37.7234 cv
87.1706 37.7234 86.0956 36.6484 86.0956 35.3234 cv
86.0956 33.9974 87.1706 32.9234 88.4956 32.9234 cv
89.8206 32.9234 90.8956 33.9974 90.8956 35.3234 cv
cp
@
106.256 40.3633 mo
106.256 41.6883 105.181 42.7633 103.856 42.7633 cv
102.531 42.7633 101.456 41.6883 101.456 40.3633 cv
101.456 39.0373 102.531 37.9633 103.856 37.9633 cv
105.181 37.9633 106.256 39.0373 106.256 40.3633 cv
f
106.256 40.3633 mo
106.256 41.6883 105.181 42.7633 103.856 42.7633 cv
102.531 42.7633 101.456 41.6883 101.456 40.3633 cv
101.456 39.0373 102.531 37.9633 103.856 37.9633 cv
105.181 37.9633 106.256 39.0373 106.256 40.3633 cv
cp
@
121.616 43.7234 mo
121.616 45.0484 120.541 46.1234 119.216 46.1234 cv
117.891 46.1234 116.816 45.0484 116.816 43.7234 cv
116.816 42.3974 117.891 41.3234 119.216 41.3234 cv
120.541 41.3234 121.616 42.3974 121.616 43.7234 cv
f
121.616 43.7234 mo
121.616 45.0484 120.541 46.1234 119.216 46.1234 cv
117.891 46.1234 116.816 45.0484 116.816 43.7234 cv
116.816 42.3974 117.891 41.3234 119.216 41.3234 cv
120.541 41.3234 121.616 42.3974 121.616 43.7234 cv
cp
@
137.216 47.0834 mo
137.216 48.4084 136.141 49.4835 134.816 49.4835 cv
133.491 49.4835 132.416 48.4084 132.416 47.0834 cv
132.416 45.7574 133.491 44.6834 134.816 44.6834 cv
136.141 44.6834 137.216 45.7574 137.216 47.0834 cv
f
137.216 47.0834 mo
137.216 48.4084 136.141 49.4835 134.816 49.4835 cv
133.491 49.4835 132.416 48.4084 132.416 47.0834 cv
132.416 45.7574 133.491 44.6834 134.816 44.6834 cv
136.141 44.6834 137.216 45.7574 137.216 47.0834 cv
cp
@
152.576 49.4835 mo
152.576 50.8085 151.501 51.8835 150.176 51.8835 cv
148.851 51.8835 147.776 50.8085 147.776 49.4835 cv
147.776 48.1575 148.851 47.0835 150.176 47.0835 cv
151.501 47.0835 152.576 48.1575 152.576 49.4835 cv
f
152.576 49.4835 mo
152.576 50.8085 151.501 51.8835 150.176 51.8835 cv
148.851 51.8835 147.776 50.8085 147.776 49.4835 cv
147.776 48.1575 148.851 47.0835 150.176 47.0835 cv
151.501 47.0835 152.576 48.1575 152.576 49.4835 cv
cp
@
167.936 51.8835 mo
167.936 53.2085 166.861 54.2835 165.536 54.2835 cv
164.211 54.2835 163.136 53.2085 163.136 51.8835 cv
163.136 50.5575 164.211 49.4835 165.536 49.4835 cv
166.861 49.4835 167.936 50.5575 167.936 51.8835 cv
f
167.936 51.8835 mo
167.936 53.2085 166.861 54.2835 165.536 54.2835 cv
164.211 54.2835 163.136 53.2085 163.136 51.8835 cv
163.136 50.5575 164.211 49.4835 165.536 49.4835 cv
166.861 49.4835 167.936 50.5575 167.936 51.8835 cv
cp
@
183.536 53.8035 mo
183.536 55.1285 182.461 56.2036 181.136 56.2036 cv
179.811 56.2036 178.736 55.1285 178.736 53.8035 cv
178.736 52.4775 179.811 51.4035 181.136 51.4035 cv
182.461 51.4035 183.536 52.4775 183.536 53.8035 cv
f
183.536 53.8035 mo
183.536 55.1285 182.461 56.2036 181.136 56.2036 cv
179.811 56.2036 178.736 55.1285 178.736 53.8035 cv
178.736 52.4775 179.811 51.4035 181.136 51.4035 cv
182.461 51.4035 183.536 52.4775 183.536 53.8035 cv
cp
@
198.896 55.4835 mo
198.896 56.8085 197.821 57.8835 196.496 57.8835 cv
195.171 57.8835 194.096 56.8085 194.096 55.4835 cv
194.096 54.1575 195.171 53.0835 196.496 53.0835 cv
197.821 53.0835 198.896 54.1575 198.896 55.4835 cv
f
198.896 55.4835 mo
198.896 56.8085 197.821 57.8835 196.496 57.8835 cv
195.171 57.8835 194.096 56.8085 194.096 55.4835 cv
194.096 54.1575 195.171 53.0835 196.496 53.0835 cv
197.821 53.0835 198.896 54.1575 198.896 55.4835 cv
cp
@
214.256 56.6835 mo
214.256 58.0085 213.181 59.0836 211.856 59.0836 cv
210.531 59.0836 209.456 58.0085 209.456 56.6835 cv
209.456 55.3575 210.531 54.2835 211.856 54.2835 cv
213.181 54.2835 214.256 55.3575 214.256 56.6835 cv
f
214.256 56.6835 mo
214.256 58.0085 213.181 59.0836 211.856 59.0836 cv
210.531 59.0836 209.456 58.0085 209.456 56.6835 cv
209.456 55.3575 210.531 54.2835 211.856 54.2835 cv
213.181 54.2835 214.256 55.3575 214.256 56.6835 cv
cp
@
229.616 57.8835 mo
229.616 59.2085 228.541 60.2835 227.216 60.2835 cv
225.891 60.2835 224.816 59.2085 224.816 57.8835 cv
224.816 56.5575 225.891 55.4835 227.216 55.4835 cv
228.541 55.4835 229.616 56.5575 229.616 57.8835 cv
f
229.616 57.8835 mo
229.616 59.2085 228.541 60.2835 227.216 60.2835 cv
225.891 60.2835 224.816 59.2085 224.816 57.8835 cv
224.816 56.5575 225.891 55.4835 227.216 55.4835 cv
228.541 55.4835 229.616 56.5575 229.616 57.8835 cv
cp
@
245.216 58.6034 mo
245.216 59.9284 244.141 61.0034 242.816 61.0034 cv
241.491 61.0034 240.416 59.9284 240.416 58.6034 cv
240.416 57.2774 241.491 56.2034 242.816 56.2034 cv
244.141 56.2034 245.216 57.2774 245.216 58.6034 cv
f
245.216 58.6034 mo
245.216 59.9284 244.141 61.0034 242.816 61.0034 cv
241.491 61.0034 240.416 59.9284 240.416 58.6034 cv
240.416 57.2774 241.491 56.2034 242.816 56.2034 cv
244.141 56.2034 245.216 57.2774 245.216 58.6034 cv
cp
@
260.576 59.3235 mo
260.576 60.6485 259.501 61.7235 258.176 61.7235 cv
256.851 61.7235 255.776 60.6485 255.776 59.3235 cv
255.776 57.9975 256.851 56.9235 258.176 56.9235 cv
259.501 56.9235 260.576 57.9975 260.576 59.3235 cv
f
260.576 59.3235 mo
260.576 60.6485 259.501 61.7235 258.176 61.7235 cv
256.851 61.7235 255.776 60.6485 255.776 59.3235 cv
255.776 57.9975 256.851 56.9235 258.176 56.9235 cv
259.501 56.9235 260.576 57.9975 260.576 59.3235 cv
cp
@
275.936 59.5635 mo
275.936 60.8885 274.861 61.9635 273.536 61.9635 cv
272.211 61.9635 271.136 60.8885 271.136 59.5635 cv
271.136 58.2375 272.211 57.1635 273.536 57.1635 cv
274.861 57.1635 275.936 58.2375 275.936 59.5635 cv
f
275.936 59.5635 mo
275.936 60.8885 274.861 61.9635 273.536 61.9635 cv
272.211 61.9635 271.136 60.8885 271.136 59.5635 cv
271.136 58.2375 272.211 57.1635 273.536 57.1635 cv
274.861 57.1635 275.936 58.2375 275.936 59.5635 cv
cp
@
291.536 59.8035 mo
291.536 61.1285 290.461 62.2036 289.136 62.2036 cv
287.811 62.2036 286.736 61.1285 286.736 59.8035 cv
286.736 58.4775 287.811 57.4035 289.136 57.4035 cv
290.461 57.4035 291.536 58.4775 291.536 59.8035 cv
f
291.536 59.8035 mo
291.536 61.1285 290.461 62.2036 289.136 62.2036 cv
287.811 62.2036 286.736 61.1285 286.736 59.8035 cv
286.736 58.4775 287.811 57.4035 289.136 57.4035 cv
290.461 57.4035 291.536 58.4775 291.536 59.8035 cv
cp
@
306.896 60.0435 mo
306.896 61.3685 305.821 62.4435 304.496 62.4435 cv
303.171 62.4435 302.096 61.3685 302.096 60.0435 cv
302.096 58.7175 303.171 57.6435 304.496 57.6435 cv
305.821 57.6435 306.896 58.7175 306.896 60.0435 cv
f
306.896 60.0435 mo
306.896 61.3685 305.821 62.4435 304.496 62.4435 cv
303.171 62.4435 302.096 61.3685 302.096 60.0435 cv
302.096 58.7175 303.171 57.6435 304.496 57.6435 cv
305.821 57.6435 306.896 58.7175 306.896 60.0435 cv
cp
@
322.256 60.2834 mo
322.256 61.6084 321.181 62.6834 319.856 62.6834 cv
318.531 62.6834 317.456 61.6084 317.456 60.2834 cv
317.456 58.9574 318.531 57.8834 319.856 57.8834 cv
321.181 57.8834 322.256 58.9574 322.256 60.2834 cv
f
322.256 60.2834 mo
322.256 61.6084 321.181 62.6834 319.856 62.6834 cv
318.531 62.6834 317.456 61.6084 317.456 60.2834 cv
317.456 58.9574 318.531 57.8834 319.856 57.8834 cv
321.181 57.8834 322.256 58.9574 322.256 60.2834 cv
cp
@
337.616 60.2834 mo
337.616 61.6084 336.541 62.6834 335.216 62.6834 cv
333.891 62.6834 332.816 61.6084 332.816 60.2834 cv
332.816 58.9574 333.891 57.8834 335.216 57.8834 cv
336.541 57.8834 337.616 58.9574 337.616 60.2834 cv
f
337.616 60.2834 mo
337.616 61.6084 336.541 62.6834 335.216 62.6834 cv
333.891 62.6834 332.816 61.6084 332.816 60.2834 cv
332.816 58.9574 333.891 57.8834 335.216 57.8834 cv
336.541 57.8834 337.616 58.9574 337.616 60.2834 cv
cp
@
353.216 60.0435 mo
353.216 61.3685 352.141 62.4435 350.816 62.4435 cv
349.491 62.4435 348.416 61.3685 348.416 60.0435 cv
348.416 58.7175 349.491 57.6435 350.816 57.6435 cv
352.141 57.6435 353.216 58.7175 353.216 60.0435 cv
f
353.216 60.0435 mo
353.216 61.3685 352.141 62.4435 350.816 62.4435 cv
349.491 62.4435 348.416 61.3685 348.416 60.0435 cv
348.416 58.7175 349.491 57.6435 350.816 57.6435 cv
352.141 57.6435 353.216 58.7175 353.216 60.0435 cv
cp
@
1.5 lw
1 lc
57.5919 35.5695 mo
62.7349 39.5605 67.8779 42.5165 73.0209 47.5415 cv
78.1639 52.5665 83.3069 59.9435 88.4499 65.7195 cv
93.5929 71.4945 98.7349 77.9155 103.878 82.1965 cv
109.021 86.4775 114.164 88.6185 119.307 91.4045 cv
124.45 94.1895 129.593 96.8035 134.736 98.9075 cv
139.879 101.012 145.022 102.518 150.165 104.029 cv
155.308 105.539 160.451 106.763 165.594 107.969 cv
170.737 109.176 175.879 110.304 181.022 111.268 cv
186.165 112.233 191.308 113.069 196.451 113.755 cv
201.594 114.442 206.737 114.849 211.88 115.387 cv
217.023 115.924 222.166 116.589 227.309 116.979 cv
232.452 117.37 237.595 117.458 242.738 117.729 cv
247.881 118 253.024 118.421 258.167 118.606 cv
263.309 118.79 268.452 118.732 273.595 118.836 cv
278.738 118.94 283.881 119.155 289.024 119.229 cv
294.167 119.304 299.31 119.266 304.453 119.284 cv
309.596 119.301 314.739 119.343 319.882 119.333 cv
325.025 119.322 330.168 119.27 335.311 119.22 cv
340.454 119.169 345.596 119.091 350.739 119.026 cv
1 /0 /CSD get_res sepcs
.353 sep
@
59.9356 35.5633 mo
59.9356 36.8883 58.8606 37.9633 57.5356 37.9633 cv
56.2106 37.9633 55.1356 36.8883 55.1356 35.5633 cv
55.1356 34.2373 56.2106 33.1633 57.5356 33.1633 cv
58.8606 33.1633 59.9356 34.2373 59.9356 35.5633 cv
f
.75 lw
0 lc
59.9356 35.5633 mo
59.9356 36.8883 58.8606 37.9633 57.5356 37.9633 cv
56.2106 37.9633 55.1356 36.8883 55.1356 35.5633 cv
55.1356 34.2373 56.2106 33.1633 57.5356 33.1633 cv
58.8606 33.1633 59.9356 34.2373 59.9356 35.5633 cv
cp
@
75.5356 47.5633 mo
75.5356 48.8883 74.4606 49.9633 73.1356 49.9633 cv
71.8106 49.9633 70.7356 48.8883 70.7356 47.5633 cv
70.7356 46.2373 71.8106 45.1633 73.1356 45.1633 cv
74.4606 45.1633 75.5356 46.2373 75.5356 47.5633 cv
f
75.5356 47.5633 mo
75.5356 48.8883 74.4606 49.9633 73.1356 49.9633 cv
71.8106 49.9633 70.7356 48.8883 70.7356 47.5633 cv
70.7356 46.2373 71.8106 45.1633 73.1356 45.1633 cv
74.4606 45.1633 75.5356 46.2373 75.5356 47.5633 cv
cp
@
90.8956 65.5633 mo
90.8956 66.8883 89.8206 67.9633 88.4956 67.9633 cv
87.1706 67.9633 86.0956 66.8883 86.0956 65.5633 cv
86.0956 64.2373 87.1706 63.1633 88.4956 63.1633 cv
89.8206 63.1633 90.8956 64.2373 90.8956 65.5633 cv
f
90.8956 65.5633 mo
90.8956 66.8883 89.8206 67.9633 88.4956 67.9633 cv
87.1706 67.9633 86.0956 66.8883 86.0956 65.5633 cv
86.0956 64.2373 87.1706 63.1633 88.4956 63.1633 cv
89.8206 63.1633 90.8956 64.2373 90.8956 65.5633 cv
cp
@
106.256 82.1233 mo
106.256 83.4483 105.181 84.5233 103.856 84.5233 cv
102.531 84.5233 101.456 83.4483 101.456 82.1233 cv
101.456 80.7973 102.531 79.7233 103.856 79.7233 cv
105.181 79.7233 106.256 80.7973 106.256 82.1233 cv
f
106.256 82.1233 mo
106.256 83.4483 105.181 84.5233 103.856 84.5233 cv
102.531 84.5233 101.456 83.4483 101.456 82.1233 cv
101.456 80.7973 102.531 79.7233 103.856 79.7233 cv
105.181 79.7233 106.256 80.7973 106.256 82.1233 cv
cp
@
121.616 91.2433 mo
121.616 92.5683 120.541 93.6433 119.216 93.6433 cv
117.891 93.6433 116.816 92.5683 116.816 91.2433 cv
116.816 89.9173 117.891 88.8433 119.216 88.8433 cv
120.541 88.8433 121.616 89.9173 121.616 91.2433 cv
f
121.616 91.2433 mo
121.616 92.5683 120.541 93.6433 119.216 93.6433 cv
117.891 93.6433 116.816 92.5683 116.816 91.2433 cv
116.816 89.9173 117.891 88.8433 119.216 88.8433 cv
120.541 88.8433 121.616 89.9173 121.616 91.2433 cv
cp
@
137.216 98.9233 mo
137.216 100.248 136.141 101.323 134.816 101.323 cv
133.491 101.323 132.416 100.248 132.416 98.9233 cv
132.416 97.5973 133.491 96.5233 134.816 96.5233 cv
136.141 96.5233 137.216 97.5973 137.216 98.9233 cv
f
137.216 98.9233 mo
137.216 100.248 136.141 101.323 134.816 101.323 cv
133.491 101.323 132.416 100.248 132.416 98.9233 cv
132.416 97.5973 133.491 96.5233 134.816 96.5233 cv
136.141 96.5233 137.216 97.5973 137.216 98.9233 cv
cp
@
152.576 103.963 mo
152.576 105.288 151.501 106.363 150.176 106.363 cv
148.851 106.363 147.776 105.288 147.776 103.963 cv
147.776 102.637 148.851 101.563 150.176 101.563 cv
151.501 101.563 152.576 102.637 152.576 103.963 cv
f
152.576 103.963 mo
152.576 105.288 151.501 106.363 150.176 106.363 cv
148.851 106.363 147.776 105.288 147.776 103.963 cv
147.776 102.637 148.851 101.563 150.176 101.563 cv
151.501 101.563 152.576 102.637 152.576 103.963 cv
cp
@
167.936 107.803 mo
167.936 109.128 166.861 110.203 165.536 110.203 cv
164.211 110.203 163.136 109.128 163.136 107.803 cv
163.136 106.477 164.211 105.403 165.536 105.403 cv
166.861 105.403 167.936 106.477 167.936 107.803 cv
f
167.936 107.803 mo
167.936 109.128 166.861 110.203 165.536 110.203 cv
164.211 110.203 163.136 109.128 163.136 107.803 cv
163.136 106.477 164.211 105.403 165.536 105.403 cv
166.861 105.403 167.936 106.477 167.936 107.803 cv
cp
@
183.536 111.163 mo
183.536 112.488 182.461 113.563 181.136 113.563 cv
179.811 113.563 178.736 112.488 178.736 111.163 cv
178.736 109.837 179.811 108.763 181.136 108.763 cv
182.461 108.763 183.536 109.837 183.536 111.163 cv
f
183.536 111.163 mo
183.536 112.488 182.461 113.563 181.136 113.563 cv
179.811 113.563 178.736 112.488 178.736 111.163 cv
178.736 109.837 179.811 108.763 181.136 108.763 cv
182.461 108.763 183.536 109.837 183.536 111.163 cv
cp
@
198.896 113.563 mo
198.896 114.888 197.821 115.963 196.496 115.963 cv
195.171 115.963 194.096 114.888 194.096 113.563 cv
194.096 112.237 195.171 111.163 196.496 111.163 cv
197.821 111.163 198.896 112.237 198.896 113.563 cv
f
198.896 113.563 mo
198.896 114.888 197.821 115.963 196.496 115.963 cv
195.171 115.963 194.096 114.888 194.096 113.563 cv
194.096 112.237 195.171 111.163 196.496 111.163 cv
197.821 111.163 198.896 112.237 198.896 113.563 cv
cp
@
214.256 115.243 mo
214.256 116.568 213.181 117.643 211.856 117.643 cv
210.531 117.643 209.456 116.568 209.456 115.243 cv
209.456 113.917 210.531 112.843 211.856 112.843 cv
213.181 112.843 214.256 113.917 214.256 115.243 cv
f
214.256 115.243 mo
214.256 116.568 213.181 117.643 211.856 117.643 cv
210.531 117.643 209.456 116.568 209.456 115.243 cv
209.456 113.917 210.531 112.843 211.856 112.843 cv
213.181 112.843 214.256 113.917 214.256 115.243 cv
cp
@
229.616 116.923 mo
229.616 118.248 228.541 119.323 227.216 119.323 cv
225.891 119.323 224.816 118.248 224.816 116.923 cv
224.816 115.597 225.891 114.523 227.216 114.523 cv
228.541 114.523 229.616 115.597 229.616 116.923 cv
f
229.616 116.923 mo
229.616 118.248 228.541 119.323 227.216 119.323 cv
225.891 119.323 224.816 118.248 224.816 116.923 cv
224.816 115.597 225.891 114.523 227.216 114.523 cv
228.541 114.523 229.616 115.597 229.616 116.923 cv
cp
@
245.216 117.643 mo
245.216 118.968 244.141 120.043 242.816 120.043 cv
241.491 120.043 240.416 118.968 240.416 117.643 cv
240.416 116.317 241.491 115.243 242.816 115.243 cv
244.141 115.243 245.216 116.317 245.216 117.643 cv
f
245.216 117.643 mo
245.216 118.968 244.141 120.043 242.816 120.043 cv
241.491 120.043 240.416 118.968 240.416 117.643 cv
240.416 116.317 241.491 115.243 242.816 115.243 cv
244.141 115.243 245.216 116.317 245.216 117.643 cv
cp
@
260.576 118.603 mo
260.576 119.928 259.501 121.003 258.176 121.003 cv
256.851 121.003 255.776 119.928 255.776 118.603 cv
255.776 117.277 256.851 116.203 258.176 116.203 cv
259.501 116.203 260.576 117.277 260.576 118.603 cv
f
260.576 118.603 mo
260.576 119.928 259.501 121.003 258.176 121.003 cv
256.851 121.003 255.776 119.928 255.776 118.603 cv
255.776 117.277 256.851 116.203 258.176 116.203 cv
259.501 116.203 260.576 117.277 260.576 118.603 cv
cp
@
275.936 118.843 mo
275.936 120.168 274.861 121.243 273.536 121.243 cv
272.211 121.243 271.136 120.168 271.136 118.843 cv
271.136 117.517 272.211 116.443 273.536 116.443 cv
274.861 116.443 275.936 117.517 275.936 118.843 cv
f
275.936 118.843 mo
275.936 120.168 274.861 121.243 273.536 121.243 cv
272.211 121.243 271.136 120.168 271.136 118.843 cv
271.136 117.517 272.211 116.443 273.536 116.443 cv
274.861 116.443 275.936 117.517 275.936 118.843 cv
cp
@
291.536 119.083 mo
291.536 120.408 290.461 121.483 289.136 121.483 cv
287.811 121.483 286.736 120.408 286.736 119.083 cv
286.736 117.757 287.811 116.683 289.136 116.683 cv
290.461 116.683 291.536 117.757 291.536 119.083 cv
f
291.536 119.083 mo
291.536 120.408 290.461 121.483 289.136 121.483 cv
287.811 121.483 286.736 120.408 286.736 119.083 cv
286.736 117.757 287.811 116.683 289.136 116.683 cv
290.461 116.683 291.536 117.757 291.536 119.083 cv
cp
@
306.896 119.083 mo
306.896 120.408 305.821 121.483 304.496 121.483 cv
303.171 121.483 302.096 120.408 302.096 119.083 cv
302.096 117.757 303.171 116.683 304.496 116.683 cv
305.821 116.683 306.896 117.757 306.896 119.083 cv
f
306.896 119.083 mo
306.896 120.408 305.821 121.483 304.496 121.483 cv
303.171 121.483 302.096 120.408 302.096 119.083 cv
302.096 117.757 303.171 116.683 304.496 116.683 cv
305.821 116.683 306.896 117.757 306.896 119.083 cv
cp
@
322.256 119.323 mo
322.256 120.648 321.181 121.723 319.856 121.723 cv
318.531 121.723 317.456 120.648 317.456 119.323 cv
317.456 117.997 318.531 116.923 319.856 116.923 cv
321.181 116.923 322.256 117.997 322.256 119.323 cv
f
322.256 119.323 mo
322.256 120.648 321.181 121.723 319.856 121.723 cv
318.531 121.723 317.456 120.648 317.456 119.323 cv
317.456 117.997 318.531 116.923 319.856 116.923 cv
321.181 116.923 322.256 117.997 322.256 119.323 cv
cp
@
337.616 119.083 mo
337.616 120.408 336.541 121.483 335.216 121.483 cv
333.891 121.483 332.816 120.408 332.816 119.083 cv
332.816 117.757 333.891 116.683 335.216 116.683 cv
336.541 116.683 337.616 117.757 337.616 119.083 cv
f
337.616 119.083 mo
337.616 120.408 336.541 121.483 335.216 121.483 cv
333.891 121.483 332.816 120.408 332.816 119.083 cv
332.816 117.757 333.891 116.683 335.216 116.683 cv
336.541 116.683 337.616 117.757 337.616 119.083 cv
cp
@
353.216 118.843 mo
353.216 120.168 352.141 121.243 350.816 121.243 cv
349.491 121.243 348.416 120.168 348.416 118.843 cv
348.416 117.517 349.491 116.443 350.816 116.443 cv
352.141 116.443 353.216 117.517 353.216 118.843 cv
f
353.216 118.843 mo
353.216 120.168 352.141 121.243 350.816 121.243 cv
349.491 121.243 348.416 120.168 348.416 118.843 cv
348.416 117.517 349.491 116.443 350.816 116.443 cv
352.141 116.443 353.216 117.517 353.216 118.843 cv
cp
@
1 /0 /CSD get_res sepcs
.651 sep
%ADOBeginSubsetFont: DVYUMU+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DVYUMU+DengXian-GBK-EUC-H 19 GetGlyphDirectory
28611 <001C60D8A8C9B78C66ECDDCB4A31B71CF1B471418D658A1BE1B520F02
65AA7AC34644C5EABA639C18B14B6949B9B765938D8D07FC6BCCB4CE1CD5D830
F911203004567794A3B4AF38AF2CB559D9D9F05F95F1CADFACE76DFED6FDC69D
44D60ACDAF6EDA57FE4BDB361FCFCACF73865443A9663D673E91191E89511BF1
A6B0ED83D875E207CDA526DBC> |
28612 <001C60D8A8C9B78C66ECFB0787869A9A1A23E44B3E9AC19DF9D3CAD17
2DB0C5BD42A48D92FB57C46F18F7186> |
28613 <001C60D8A8C9B78C66ECF39464E4C36A41875CA13B3F1084BE95AC3D6
B174FBE334F26768C74B2ECC4CAD6BBADA966160EFCC7F2747E70E0119D6AEC1
B017FF7666859BBB2EDC8A44058072DB251CD7C890E5801C60DCDEC2DC5E66B6
27F3C4E46C8D576EB2D7BE3EC5C6EC7CA35C52158FC62F188AA92F4A597AA61B
2CBCDB07E050E80BB022F1A82> |
28614 <001C60D8A8C9B78C66ECDB6140BE188B7AE32EC2E6019387F28A4D7BE
FD974FECF9A6F435E80E22F5012EC52C00C178C2C2233F0B02C6B10EBA64AD22
230138C4945FB4B066D7E42C2C6EFB71864F1E255E0A8537DA22ADB3D546CB61
607C115C7A490FEE823B22C59C8C165CEA3BA45F26ED3655E00609C70321AC2E
2A2A318B590A3969C48D77B80570739FD2C391323D888FB7CCA532472D5F05C1
B478B862C545672D9550E95CD5D79AEB7716096AD08C7A6D17AAF6F6AA3FE1AB
AEC80F85A> |
28615 <001C60D8A8C9B78C66ECE3FE51EC4A6C00F5F743D3A964A65A3B26B4A
BA75D1C6449C63EC7E2BD2BAFDE22A96CAB5112BA62956C94C83D> |
28616 <001C60D8A8C9B78C66ECA399DB3215B61D1045333ECE760DE944D4DAD
58E494E9686CE6E0B7F3BE1F35A93B5423265BA3893C04B714A69913AF9D9779
23B3C20D3D2AA76C91C82C1C386A7D46DE7E32B075962CCF06380F2D2F2120A6
00588A3E6789AEFC99A5B99FAD22A2D4F5D95FBB7D27994C4F36761D753099D0
4D937122FCF22470C8A4DB2D425FA5D9B241F> |
28617 <001C60D8A8C9B78C66ECA5FCAD2AAB40A4192A68649CE4047E4AFAECB
7CCE984F38B8B50E6233F27BD605D687743F24A7E136BA1908054D9AA8AAE8FA
60DFE236222616415444B0B8B81E9B590E20EC5E2AE4CA73CFE760E5978319FB
10D6E85D90B0F0670931F7021C1540F7F59AF2F4001DC35F63939A901107334C
C707991D976B1159441A0F1ACA86EE9A9885D2AA13CD06CBBC97DCCE8B0B6519
440F899D41BA7449252C8DAEFBE21085C577DFAE8E5250EB7438F2FCF6755F16
B841A2282B2> |
28618 <001C60D8A8C9B78C66ECF7D3BA67398AE9E49D48F332AD68055040EFD
C570015E965A8417FD47DE058ACCDDAB1162F2B6CC25E70521D0871F7A1> |
28643 <001C60D8A8C9B7931D88C549581514B303475B68F3A5B82FC10C33046
B1178E35B340E46A0F7AFD1D8477157DB986336BDE495E836D190C26AFD0533C
6A5709B3E706B37262928FC6678F90AED700592FB6F17C4CA4353B0E987BB933
7B4E4E6727403A52D0FD507E960> |
28664 <001C60D8A8C9B7B9B9DE64C375A9DBACE95282B2312E3D85E750527CC
1CB7ECCD03A956DF6AAF4A7168B7148981EC76A8077847319739BD7AFC9C273C
D7ABB104CCAF232DF037808051A4E0AEF540B0A7B3AF3F3A775F4BE57DC95A2B
88BC481E3C3C5CD29A90412FD55B68E26377057408C4E5640926FF2E1A05E5CA
C44778E8205CC9A62299713EA1CA0206B13> |
28677 <001C60D8A8C9B81947031993F366B7797E01770F0CCF402A3810F4860
85B72DA10BE6CC101E91F1F1C8B8F646643C5A8F34CC08EB50A8A38B409FF70F
C08890288922D85661D7A1EFC0CE23BA363CBFF61764B> |
28675 <001C60D8A8C9B7FD84953D11880AD4F37B2510559D37A2059564A2CE2
E16A7500A94FDD66B9E5A19619AACEE642F7128DBE261B121C3C7CC16942981C
D231447F25C4534F5D376D352FCD328019825A63D60C00859FFDC4B610FDC284
CD7F0495A1DC5978D3ED40B7F14741A387BEC5E756DB50728BA11C7FAA4BE6E3
23AF5AACA5CEEA8995FF8194E08068A8A5E046955C8CD8BFE88BBA9F1EEEA2C2
A3AE2D93280F668321E4BB938F72F3C852944> |
28683 <001C60D8A8C9B763568A72CE33323336558FEDB35993DFA979CD86B9E
44D82CA27D61977017D8EA8E32C142B6DFCAD6275AECF8C3D9734503912A95C0
6> |
28668 <001C60D8A8C9B88A65BA9079859C0FCC394F785DDA5330D8BBC923C4A
04A6379E7CCB9> |
28684 <001C60D8A8C9B747CAEFBC26A39BFF2819386B8EE1586C3CAC86C70F1
BAB44FD74F44D22A5C5DC757A66F0816E2C4932FBAD1CE3F09292C0B35BE69FC
446316A805AFF5DE4C4DCF6EE1023C859A9294B67999444465B2E58797F793D1
FFD7BE16AE4CE582B1E52CCD9D1A67897C4BBAC9E8DF1> |
28674 <001C60D8A8C9B7FE5AD20AE56213796D50B188B2C5CBFF678B1A9D104
AF97FCBEA6169C9DF4E313B2A55EC833C42B1AB0E8A13DA65F86C2C2AEDEA104
DE02E7F576D982DF30B78FB76CCFB07A8EB8179B2F3818BC620295E8F285682C
058E01E22BECBF493516051F07EB2FFD039B1F2347AD2EEC2F8D2F7E17A3B95F
D9B5890C6237E6820> |
28632 <001C60D8A8C9B7A4C86C58826A7CADEB7B0D78D3A58A13CDBAB0CA4F6
979882BC86A42E2AD85808956602D9668> |
28662 <001C60D8A8C9B776A06C6FC231F3BF82B95E430F6D347A409EECD485F
9B406FA6336964C8BF7664E2AB055B44D3A06959A7781CE4D2FEDDD996C546F2
2FC5837E64BBC80EF4699966E80B1E4ED4A9C3550A8BDD97A63B0696CF3EE432
A03807D55000A523F2214> |
28667 <001C60D8A8C9B795A0BECF06305EE87369211718D3EE2DE866B243806
8E9C3C724D0F5C6BF169F72E1C71967F26B4562105E8A8583BC41A15D900A2B3
FFCE9F31BD4591CB25C31293EBF9381ACF282B598F9431868A2ECD743332A8F6
186BC7793F5EA54E68DE38FBB93> |
!
end
end end
%ADOEndSubsetFont
/DVYUMU+DengXian-GBK-EUC-H-Identity-H findfont [9.12 0 0 -9.12 0 0 ]msf
373.286 146.625 mo
(o\303)sh
373.286 124.609 mo
(o\304o\303o\303)
[4.7998 4.79977 0 ]xsh
373.286 102.593 mo
(o\305o\303o\303)
[4.7998 4.79977 0 ]xsh
373.286 80.5776 mo
(o\306o\303o\303)
[4.7998 4.79977 0 ]xsh
373.286 58.5619 mo
(o\307o\303o\303)
[4.7998 4.79977 0 ]xsh
373.286 36.5462 mo
(o\310o\303o\303)
[4.7998 4.79977 0 ]xsh
373.286 14.5305 mo
(o\311o\303o\303)
[4.7998 4.79977 0 ]xsh
30.3098 146.615 mo
(o\303)sh
30.3098 127.746 mo
(o\304)sh
30.3098 108.877 mo
(o\305)sh
30.3098 90.0077 mo
(o\306)sh
30.3098 71.1384 mo
(o\307)sh
30.3098 52.2692 mo
(o\310)sh
30.3098 33.3999 mo
(o\311)sh
30.3098 14.5306 mo
(o\312)sh
39.7946 156.255 mo
(o\303)sh
116.941 156.255 mo
(o\310)sh
191.716 156.255 mo
(o\304o\303)
[4.7998 0 ]xsh
268.862 156.255 mo
(o\304o\310)
[4.7998 0 ]xsh
346.008 156.255 mo
(o\305o\303)
[4.7998 0 ]xsh
/DVYUMU+DengXian-GBK-EUC-H-Identity-H findfont [0 -10.08 -10.08 0 0 0 ]msf
400.106 99.1827 mo
(o\343o\370p\005p\003o\377o\370p\013o\374p\007p\014)
[-5.51984 -5.27997 -3.36072 -5.75977 -2.16016 -5.27997 -4.56018 -2.16016 -3.11462 0 ]ysh
23.3556 87.6613 mo
(o\337p\002p\006p\006)
[-4.80017 -5.75562 -4.08044 0 ]ysh
/DVYUMU+DengXian-GBK-EUC-H-Identity-H findfont [10.08 0 0 -10.08 0 0 ]msf
190.808 171.042 mo
(o\330p\003p\002o\366o\373)
[5.04007 5.75977 5.75565 4.5592 0 ]xsh
1.5 lw
1 lc
112.601 195.133 mo
131.801 195.133 li
.765011 .551873 0 0 cmyk
@
124.496 195.015 mo
124.496 196.34 123.421 197.415 122.096 197.415 cv
120.771 197.415 119.696 196.34 119.696 195.015 cv
119.696 193.689 120.771 192.615 122.096 192.615 cv
123.421 192.615 124.496 193.689 124.496 195.015 cv
f
.75 lw
0 lc
124.496 195.015 mo
124.496 196.34 123.421 197.415 122.096 197.415 cv
120.771 197.415 119.696 196.34 119.696 195.015 cv
119.696 193.689 120.771 192.615 122.096 192.615 cv
123.421 192.615 124.496 193.689 124.496 195.015 cv
cp
@
1 /0 /CSD get_res sepcs
.651 sep
%ADOBeginSubsetFont: DVYUMU+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DVYUMU+DengXian-GBK-EUC-H 3 GetGlyphDirectory
28660 <001C60D8A8C9B7A66FF208F1FFFF199CBF15DA40789B41A8940D81C59
F2725073E42964675E0DD202817D399E2FB17DEF0CEC97867EBCB7ADAAC507C9
72A055AF41A6B42F3641829E4746E9DE8C8DEC7FAD6AFE6EBAF1665BBE8EA5B5
A4B9F141EB4692A8EBE22B205223CA91FA890F02D7332206F1E0DCBF993E8459
4C8743CFA4B5ADE36A0FB102061281D6EFB1A65732FABB4B70E2A43CB34852E4
67727B0E2BBD33CA8A301D3BF82124C> |
28673 <001C60D8A8C9B795A0BECF06305EE87369211718D3EE2DE866B243806
8E9C56279E98DF67709852BED129643D4AB00494058DE56C3A2F59EF8337CDEA
A886E2F10A16806F6D040F0BA7348192390D4410BDA51BF850E2AE66992849BB
353A6DA88D5EB6C10AE42038B49> |
28610 <001C60D8A8C9B7212E9A58E2DDA81747ED27CEEC2E27DE2A6B> |
!
end
end end
%ADOEndSubsetFont
/DVYUMU+DengXian-GBK-EUC-H-Identity-H findfont [9.12 0 0 -9.12 0 0 ]msf
133.826 197.55 mo
(p\007p\005o\364o\374p\001o\263o\377p\002p\006p\006o\263o\302o\263o\305o\303o\303o\303)
[2.88004 3.12 4.32294 2.15961 4.79988 2.64026 1.91975 5.27956 3.60063 3.5997 2.39859 3.60062 
2.39859 4.7998 4.55994 4.79977 0 ]xsh
1.5 lw
1 lc
207.273 195.133 mo
226.473 195.133 li
.0326238 .622919 .92285 .000610361 cmyk
@
219.296 195.015 mo
219.296 196.34 218.221 197.415 216.896 197.415 cv
215.571 197.415 214.496 196.34 214.496 195.015 cv
214.496 193.689 215.571 192.615 216.896 192.615 cv
218.221 192.615 219.296 193.689 219.296 195.015 cv
f
.75 lw
0 lc
219.296 195.015 mo
219.296 196.34 218.221 197.415 216.896 197.415 cv
215.571 197.415 214.496 196.34 214.496 195.015 cv
214.496 193.689 215.571 192.615 216.896 192.615 cv
218.221 192.615 219.296 193.689 219.296 195.015 cv
cp
@
1 /0 /CSD get_res sepcs
.651 sep
%ADOBeginSubsetFont: DVYUMU+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DVYUMU+DengXian-GBK-EUC-H 2 GetGlyphDirectory
28681 <001C60D8A8C9B74969EE40BB25ABD91F8460DD23DB9B191A528027CD2
A43C92EB48C42770A0B496FFADA0F67DDBE4B6E31AA2489D103934A6C89> |
28663 <001C60D8A8C9B7FD849E053B577F0EC76167B9364DDA2AA91631C3CFF
8DC23E0BF6538C74A911385270AC07DCC593E92BECBB696706EF8F8C1C4CE2EF
8295729E284A84BB380C6F5C037CA541C9414BC119A0C6BC7171A44F4E2D24AC
C188520E6BDD194B2F3287711D10FF61B4853208E1CBD0B94B4B63BC29FDB45C
C26906A021B80EDE97A058C4DE4036DD68F93905E608AD84B6128CEEED8DF392
1CD2DB7F4217EEE2DC9> |
!
end
end end
%ADOEndSubsetFont
/DVYUMU+DengXian-GBK-EUC-H-Identity-H findfont [9.12 0 0 -9.12 0 0 ]msf
228.498 197.55 mo
(p\011o\364o\377o\374o\367o\263o\377p\002p\006p\006)
[4.08032 4.56006 2.15961 1.91974 5.28055 2.39856 1.92432 5.27957 3.60062 0 ]xsh
1.5 lw
1 lc
275.165 195.133 mo
294.365 195.133 li
1 /0 /CSD get_res sepcs
.353 sep
@
287.216 195.015 mo
287.216 196.34 286.141 197.415 284.816 197.415 cv
283.491 197.415 282.416 196.34 282.416 195.015 cv
282.416 193.689 283.491 192.615 284.816 192.615 cv
286.141 192.615 287.216 193.689 287.216 195.015 cv
f
.75 lw
0 lc
287.216 195.015 mo
287.216 196.34 286.141 197.415 284.816 197.415 cv
283.491 197.415 282.416 196.34 282.416 195.015 cv
282.416 193.689 283.491 192.615 284.816 192.615 cv
286.141 192.615 287.216 193.689 287.216 195.015 cv
cp
@
1 /0 /CSD get_res sepcs
.651 sep
/DVYUMU+DengXian-GBK-EUC-H-Identity-H findfont [9.12 0 0 -9.12 0 0 ]msf
296.39 197.55 mo
(p\003p\003o\377)
[5.2796 5.04343 0 ]xsh
1.25562 1.12354 mo
416.556 1.12354 li
416.556 208.774 li
1.25562 208.774 li
cp
1 /0 /CSD get_res sepcs
.149 sep
@
1.25562 250.721 mo
416.556 250.721 li
416.556 458.921 li
1.25562 458.921 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
48.8781 367.935 mo
366.168 367.935 li
48.8781 341.294 mo
366.168 341.294 li
48.8781 314.895 mo
366.168 314.895 li
48.8781 288.255 mo
366.168 288.255 li
48.8781 261.721 mo
366.168 261.721 li
1 /0 /CSD get_res sepcs
.149 sep
@
124.376 261.721 mo
124.376 394.355 li
199.976 261.721 mo
199.976 394.355 li
275.576 261.721 mo
275.576 394.355 li
351.059 261.721 mo
351.059 394.355 li
@
366.168 394.355 mo
366.168 261.721 li
1 /0 /CSD get_res sepcs
.251 sep
@
366.168 394.355 mo
368.598 394.355 li
366.168 372.255 mo
368.598 372.255 li
366.168 350.175 mo
368.598 350.175 li
366.168 328.095 mo
368.598 328.095 li
366.168 306.015 mo
368.598 306.015 li
366.168 283.935 mo
368.598 283.935 li
366.168 261.721 mo
368.598 261.721 li
@
48.8781 394.355 mo
48.8781 261.721 li
@
48.8781 394.355 mo
366.168 394.355 li
@
1.5 lw
1 lc
63.9872 292.184 mo
69.0232 300.392 74.0602 310.764 79.0962 316.807 cv
84.1322 322.85 89.1692 325.648 94.2052 328.442 cv
99.2412 331.236 104.278 332.188 109.314 333.571 cv
114.35 334.955 119.387 335.825 124.423 336.744 cv
129.46 337.663 134.496 338.394 139.532 339.087 cv
144.568 339.779 149.605 340.358 154.641 340.899 cv
159.678 341.44 164.714 341.903 169.75 342.331 cv
174.787 342.76 179.823 343.129 184.859 343.468 cv
189.896 343.806 194.932 344.095 199.968 344.363 cv
205.005 344.631 210.041 344.863 215.077 345.075 cv
220.114 345.287 225.15 345.47 230.187 345.637 cv
235.223 345.805 240.259 345.949 245.296 346.08 cv
250.332 346.212 255.368 346.324 260.405 346.428 cv
265.441 346.531 270.477 346.621 275.514 346.702 cv
280.55 346.784 285.586 346.853 290.623 346.917 cv
295.659 346.981 300.695 347.035 305.732 347.084 cv
310.768 347.134 315.804 347.176 320.841 347.215 cv
325.877 347.253 330.913 347.286 335.95 347.316 cv
340.986 347.347 346.023 347.37 351.059 347.397 cv
.765011 .551873 0 0 cmyk
@
66.4156 292.121 mo
66.4156 293.447 65.3406 294.521 64.0156 294.521 cv
62.6906 294.521 61.6156 293.447 61.6156 292.121 cv
61.6156 290.796 62.6906 289.721 64.0156 289.721 cv
65.3406 289.721 66.4156 290.796 66.4156 292.121 cv
f
.75 lw
0 lc
66.4156 292.121 mo
66.4156 293.447 65.3406 294.521 64.0156 294.521 cv
62.6906 294.521 61.6156 293.447 61.6156 292.121 cv
61.6156 290.796 62.6906 289.721 64.0156 289.721 cv
65.3406 289.721 66.4156 290.796 66.4156 292.121 cv
cp
@
81.5356 316.601 mo
81.5356 317.927 80.4606 319.001 79.1356 319.001 cv
77.8106 319.001 76.7356 317.927 76.7356 316.601 cv
76.7356 315.276 77.8106 314.201 79.1356 314.201 cv
80.4606 314.201 81.5356 315.276 81.5356 316.601 cv
f
81.5356 316.601 mo
81.5356 317.927 80.4606 319.001 79.1356 319.001 cv
77.8106 319.001 76.7356 317.927 76.7356 316.601 cv
76.7356 315.276 77.8106 314.201 79.1356 314.201 cv
80.4606 314.201 81.5356 315.276 81.5356 316.601 cv
cp
@
96.6556 328.361 mo
96.6556 329.687 95.5806 330.761 94.2556 330.761 cv
92.9306 330.761 91.8556 329.687 91.8556 328.361 cv
91.8556 327.036 92.9306 325.961 94.2556 325.961 cv
95.5806 325.961 96.6556 327.036 96.6556 328.361 cv
f
96.6556 328.361 mo
96.6556 329.687 95.5806 330.761 94.2556 330.761 cv
92.9306 330.761 91.8556 329.687 91.8556 328.361 cv
91.8556 327.036 92.9306 325.961 94.2556 325.961 cv
95.5806 325.961 96.6556 327.036 96.6556 328.361 cv
cp
@
111.776 333.401 mo
111.776 334.727 110.701 335.801 109.376 335.801 cv
108.051 335.801 106.976 334.727 106.976 333.401 cv
106.976 332.076 108.051 331.001 109.376 331.001 cv
110.701 331.001 111.776 332.076 111.776 333.401 cv
f
111.776 333.401 mo
111.776 334.727 110.701 335.801 109.376 335.801 cv
108.051 335.801 106.976 334.727 106.976 333.401 cv
106.976 332.076 108.051 331.001 109.376 331.001 cv
110.701 331.001 111.776 332.076 111.776 333.401 cv
cp
@
126.896 336.761 mo
126.896 338.087 125.821 339.161 124.496 339.161 cv
123.171 339.161 122.096 338.087 122.096 336.761 cv
122.096 335.436 123.171 334.361 124.496 334.361 cv
125.821 334.361 126.896 335.436 126.896 336.761 cv
f
126.896 336.761 mo
126.896 338.087 125.821 339.161 124.496 339.161 cv
123.171 339.161 122.096 338.087 122.096 336.761 cv
122.096 335.436 123.171 334.361 124.496 334.361 cv
125.821 334.361 126.896 335.436 126.896 336.761 cv
cp
@
142.016 338.921 mo
142.016 340.247 140.941 341.321 139.616 341.321 cv
138.291 341.321 137.216 340.247 137.216 338.921 cv
137.216 337.596 138.291 336.521 139.616 336.521 cv
140.941 336.521 142.016 337.596 142.016 338.921 cv
f
142.016 338.921 mo
142.016 340.247 140.941 341.321 139.616 341.321 cv
138.291 341.321 137.216 340.247 137.216 338.921 cv
137.216 337.596 138.291 336.521 139.616 336.521 cv
140.941 336.521 142.016 337.596 142.016 338.921 cv
cp
@
157.136 340.841 mo
157.136 342.167 156.061 343.241 154.736 343.241 cv
153.411 343.241 152.336 342.167 152.336 340.841 cv
152.336 339.516 153.411 338.441 154.736 338.441 cv
156.061 338.441 157.136 339.516 157.136 340.841 cv
f
157.136 340.841 mo
157.136 342.167 156.061 343.241 154.736 343.241 cv
153.411 343.241 152.336 342.167 152.336 340.841 cv
152.336 339.516 153.411 338.441 154.736 338.441 cv
156.061 338.441 157.136 339.516 157.136 340.841 cv
cp
@
172.256 342.281 mo
172.256 343.607 171.181 344.681 169.856 344.681 cv
168.531 344.681 167.456 343.607 167.456 342.281 cv
167.456 340.956 168.531 339.881 169.856 339.881 cv
171.181 339.881 172.256 340.956 172.256 342.281 cv
f
172.256 342.281 mo
172.256 343.607 171.181 344.681 169.856 344.681 cv
168.531 344.681 167.456 343.607 167.456 342.281 cv
167.456 340.956 168.531 339.881 169.856 339.881 cv
171.181 339.881 172.256 340.956 172.256 342.281 cv
cp
@
187.376 343.481 mo
187.376 344.807 186.301 345.881 184.976 345.881 cv
183.651 345.881 182.576 344.807 182.576 343.481 cv
182.576 342.156 183.651 341.081 184.976 341.081 cv
186.301 341.081 187.376 342.156 187.376 343.481 cv
f
187.376 343.481 mo
187.376 344.807 186.301 345.881 184.976 345.881 cv
183.651 345.881 182.576 344.807 182.576 343.481 cv
182.576 342.156 183.651 341.081 184.976 341.081 cv
186.301 341.081 187.376 342.156 187.376 343.481 cv
cp
@
202.256 344.201 mo
202.256 345.527 201.181 346.601 199.856 346.601 cv
198.531 346.601 197.456 345.527 197.456 344.201 cv
197.456 342.876 198.531 341.801 199.856 341.801 cv
201.181 341.801 202.256 342.876 202.256 344.201 cv
f
202.256 344.201 mo
202.256 345.527 201.181 346.601 199.856 346.601 cv
198.531 346.601 197.456 345.527 197.456 344.201 cv
197.456 342.876 198.531 341.801 199.856 341.801 cv
201.181 341.801 202.256 342.876 202.256 344.201 cv
cp
@
217.376 344.921 mo
217.376 346.247 216.301 347.321 214.976 347.321 cv
213.651 347.321 212.576 346.247 212.576 344.921 cv
212.576 343.596 213.651 342.521 214.976 342.521 cv
216.301 342.521 217.376 343.596 217.376 344.921 cv
f
217.376 344.921 mo
217.376 346.247 216.301 347.321 214.976 347.321 cv
213.651 347.321 212.576 346.247 212.576 344.921 cv
212.576 343.596 213.651 342.521 214.976 342.521 cv
216.301 342.521 217.376 343.596 217.376 344.921 cv
cp
@
232.496 345.641 mo
232.496 346.967 231.421 348.041 230.096 348.041 cv
228.771 348.041 227.696 346.967 227.696 345.641 cv
227.696 344.316 228.771 343.241 230.096 343.241 cv
231.421 343.241 232.496 344.316 232.496 345.641 cv
f
232.496 345.641 mo
232.496 346.967 231.421 348.041 230.096 348.041 cv
228.771 348.041 227.696 346.967 227.696 345.641 cv
227.696 344.316 228.771 343.241 230.096 343.241 cv
231.421 343.241 232.496 344.316 232.496 345.641 cv
cp
@
247.616 345.881 mo
247.616 347.207 246.541 348.281 245.216 348.281 cv
243.891 348.281 242.816 347.207 242.816 345.881 cv
242.816 344.556 243.891 343.481 245.216 343.481 cv
246.541 343.481 247.616 344.556 247.616 345.881 cv
f
247.616 345.881 mo
247.616 347.207 246.541 348.281 245.216 348.281 cv
243.891 348.281 242.816 347.207 242.816 345.881 cv
242.816 344.556 243.891 343.481 245.216 343.481 cv
246.541 343.481 247.616 344.556 247.616 345.881 cv
cp
@
262.736 346.361 mo
262.736 347.687 261.661 348.761 260.336 348.761 cv
259.011 348.761 257.936 347.687 257.936 346.361 cv
257.936 345.036 259.011 343.961 260.336 343.961 cv
261.661 343.961 262.736 345.036 262.736 346.361 cv
f
262.736 346.361 mo
262.736 347.687 261.661 348.761 260.336 348.761 cv
259.011 348.761 257.936 347.687 257.936 346.361 cv
257.936 345.036 259.011 343.961 260.336 343.961 cv
261.661 343.961 262.736 345.036 262.736 346.361 cv
cp
@
277.856 346.601 mo
277.856 347.927 276.781 349.001 275.456 349.001 cv
274.131 349.001 273.056 347.927 273.056 346.601 cv
273.056 345.276 274.131 344.201 275.456 344.201 cv
276.781 344.201 277.856 345.276 277.856 346.601 cv
f
277.856 346.601 mo
277.856 347.927 276.781 349.001 275.456 349.001 cv
274.131 349.001 273.056 347.927 273.056 346.601 cv
273.056 345.276 274.131 344.201 275.456 344.201 cv
276.781 344.201 277.856 345.276 277.856 346.601 cv
cp
@
292.976 346.841 mo
292.976 348.167 291.901 349.241 290.576 349.241 cv
289.251 349.241 288.176 348.167 288.176 346.841 cv
288.176 345.516 289.251 344.441 290.576 344.441 cv
291.901 344.441 292.976 345.516 292.976 346.841 cv
f
292.976 346.841 mo
292.976 348.167 291.901 349.241 290.576 349.241 cv
289.251 349.241 288.176 348.167 288.176 346.841 cv
288.176 345.516 289.251 344.441 290.576 344.441 cv
291.901 344.441 292.976 345.516 292.976 346.841 cv
cp
@
308.096 347.081 mo
308.096 348.407 307.021 349.481 305.696 349.481 cv
304.371 349.481 303.296 348.407 303.296 347.081 cv
303.296 345.756 304.371 344.681 305.696 344.681 cv
307.021 344.681 308.096 345.756 308.096 347.081 cv
f
308.096 347.081 mo
308.096 348.407 307.021 349.481 305.696 349.481 cv
304.371 349.481 303.296 348.407 303.296 347.081 cv
303.296 345.756 304.371 344.681 305.696 344.681 cv
307.021 344.681 308.096 345.756 308.096 347.081 cv
cp
@
323.216 347.081 mo
323.216 348.407 322.141 349.481 320.816 349.481 cv
319.491 349.481 318.416 348.407 318.416 347.081 cv
318.416 345.756 319.491 344.681 320.816 344.681 cv
322.141 344.681 323.216 345.756 323.216 347.081 cv
f
323.216 347.081 mo
323.216 348.407 322.141 349.481 320.816 349.481 cv
319.491 349.481 318.416 348.407 318.416 347.081 cv
318.416 345.756 319.491 344.681 320.816 344.681 cv
322.141 344.681 323.216 345.756 323.216 347.081 cv
cp
@
338.336 347.321 mo
338.336 348.647 337.261 349.721 335.936 349.721 cv
334.611 349.721 333.536 348.647 333.536 347.321 cv
333.536 345.996 334.611 344.921 335.936 344.921 cv
337.261 344.921 338.336 345.996 338.336 347.321 cv
f
338.336 347.321 mo
338.336 348.647 337.261 349.721 335.936 349.721 cv
334.611 349.721 333.536 348.647 333.536 347.321 cv
333.536 345.996 334.611 344.921 335.936 344.921 cv
337.261 344.921 338.336 345.996 338.336 347.321 cv
cp
@
353.456 347.321 mo
353.456 348.647 352.381 349.721 351.056 349.721 cv
349.731 349.721 348.656 348.647 348.656 347.321 cv
348.656 345.996 349.731 344.921 351.056 344.921 cv
352.381 344.921 353.456 345.996 353.456 347.321 cv
f
353.456 347.321 mo
353.456 348.647 352.381 349.721 351.056 349.721 cv
349.731 349.721 348.656 348.647 348.656 347.321 cv
348.656 345.996 349.731 344.921 351.056 344.921 cv
352.381 344.921 353.456 345.996 353.456 347.321 cv
cp
@
1.5 lw
1 lc
63.9872 286.861 mo
69.0232 294.875 74.0602 305.74 79.0962 310.904 cv
84.1322 316.069 89.1692 316.191 94.2052 317.847 cv
99.2412 319.504 104.278 320.078 109.314 320.845 cv
114.35 321.612 119.387 322.055 124.423 322.449 cv
129.46 322.843 134.496 322.997 139.532 323.208 cv
144.568 323.42 149.605 323.597 154.641 323.718 cv
159.678 323.84 164.714 323.877 169.75 323.935 cv
174.787 323.993 179.823 324.033 184.859 324.066 cv
189.896 324.098 194.932 324.116 199.968 324.13 cv
205.005 324.144 210.041 324.146 215.077 324.15 cv
220.114 324.154 225.15 324.153 230.187 324.155 cv
235.223 324.156 240.259 324.163 245.296 324.159 cv
250.332 324.154 255.368 324.138 260.405 324.126 cv
265.441 324.113 270.477 324.09 275.514 324.084 cv
280.55 324.079 285.586 324.096 290.623 324.093 cv
295.659 324.09 300.695 324.074 305.732 324.066 cv
310.768 324.058 315.804 324.05 320.841 324.046 cv
325.877 324.042 330.913 324.044 335.95 324.04 cv
340.986 324.037 346.023 324.03 351.059 324.025 cv
.0326238 .622919 .92285 .000610361 cmyk
@
66.4156 286.841 mo
66.4156 288.167 65.3406 289.241 64.0156 289.241 cv
62.6906 289.241 61.6156 288.167 61.6156 286.841 cv
61.6156 285.516 62.6906 284.441 64.0156 284.441 cv
65.3406 284.441 66.4156 285.516 66.4156 286.841 cv
f
.75 lw
0 lc
66.4156 286.841 mo
66.4156 288.167 65.3406 289.241 64.0156 289.241 cv
62.6906 289.241 61.6156 288.167 61.6156 286.841 cv
61.6156 285.516 62.6906 284.441 64.0156 284.441 cv
65.3406 284.441 66.4156 285.516 66.4156 286.841 cv
cp
@
81.5356 310.841 mo
81.5356 312.167 80.4606 313.241 79.1356 313.241 cv
77.8106 313.241 76.7356 312.167 76.7356 310.841 cv
76.7356 309.516 77.8106 308.441 79.1356 308.441 cv
80.4606 308.441 81.5356 309.516 81.5356 310.841 cv
f
81.5356 310.841 mo
81.5356 312.167 80.4606 313.241 79.1356 313.241 cv
77.8106 313.241 76.7356 312.167 76.7356 310.841 cv
76.7356 309.516 77.8106 308.441 79.1356 308.441 cv
80.4606 308.441 81.5356 309.516 81.5356 310.841 cv
cp
@
96.6556 317.801 mo
96.6556 319.127 95.5806 320.201 94.2556 320.201 cv
92.9306 320.201 91.8556 319.127 91.8556 317.801 cv
91.8556 316.476 92.9306 315.401 94.2556 315.401 cv
95.5806 315.401 96.6556 316.476 96.6556 317.801 cv
f
96.6556 317.801 mo
96.6556 319.127 95.5806 320.201 94.2556 320.201 cv
92.9306 320.201 91.8556 319.127 91.8556 317.801 cv
91.8556 316.476 92.9306 315.401 94.2556 315.401 cv
95.5806 315.401 96.6556 316.476 96.6556 317.801 cv
cp
@
111.776 320.681 mo
111.776 322.007 110.701 323.081 109.376 323.081 cv
108.051 323.081 106.976 322.007 106.976 320.681 cv
106.976 319.356 108.051 318.281 109.376 318.281 cv
110.701 318.281 111.776 319.356 111.776 320.681 cv
f
111.776 320.681 mo
111.776 322.007 110.701 323.081 109.376 323.081 cv
108.051 323.081 106.976 322.007 106.976 320.681 cv
106.976 319.356 108.051 318.281 109.376 318.281 cv
110.701 318.281 111.776 319.356 111.776 320.681 cv
cp
@
126.896 322.361 mo
126.896 323.687 125.821 324.761 124.496 324.761 cv
123.171 324.761 122.096 323.687 122.096 322.361 cv
122.096 321.036 123.171 319.961 124.496 319.961 cv
125.821 319.961 126.896 321.036 126.896 322.361 cv
f
126.896 322.361 mo
126.896 323.687 125.821 324.761 124.496 324.761 cv
123.171 324.761 122.096 323.687 122.096 322.361 cv
122.096 321.036 123.171 319.961 124.496 319.961 cv
125.821 319.961 126.896 321.036 126.896 322.361 cv
cp
@
142.016 323.081 mo
142.016 324.407 140.941 325.481 139.616 325.481 cv
138.291 325.481 137.216 324.407 137.216 323.081 cv
137.216 321.756 138.291 320.681 139.616 320.681 cv
140.941 320.681 142.016 321.756 142.016 323.081 cv
f
142.016 323.081 mo
142.016 324.407 140.941 325.481 139.616 325.481 cv
138.291 325.481 137.216 324.407 137.216 323.081 cv
137.216 321.756 138.291 320.681 139.616 320.681 cv
140.941 320.681 142.016 321.756 142.016 323.081 cv
cp
@
157.136 323.561 mo
157.136 324.887 156.061 325.961 154.736 325.961 cv
153.411 325.961 152.336 324.887 152.336 323.561 cv
152.336 322.236 153.411 321.161 154.736 321.161 cv
156.061 321.161 157.136 322.236 157.136 323.561 cv
f
157.136 323.561 mo
157.136 324.887 156.061 325.961 154.736 325.961 cv
153.411 325.961 152.336 324.887 152.336 323.561 cv
152.336 322.236 153.411 321.161 154.736 321.161 cv
156.061 321.161 157.136 322.236 157.136 323.561 cv
cp
@
172.256 323.801 mo
172.256 325.127 171.181 326.201 169.856 326.201 cv
168.531 326.201 167.456 325.127 167.456 323.801 cv
167.456 322.476 168.531 321.401 169.856 321.401 cv
171.181 321.401 172.256 322.476 172.256 323.801 cv
f
172.256 323.801 mo
172.256 325.127 171.181 326.201 169.856 326.201 cv
168.531 326.201 167.456 325.127 167.456 323.801 cv
167.456 322.476 168.531 321.401 169.856 321.401 cv
171.181 321.401 172.256 322.476 172.256 323.801 cv
cp
@
187.376 324.041 mo
187.376 325.367 186.301 326.441 184.976 326.441 cv
183.651 326.441 182.576 325.367 182.576 324.041 cv
182.576 322.716 183.651 321.641 184.976 321.641 cv
186.301 321.641 187.376 322.716 187.376 324.041 cv
f
187.376 324.041 mo
187.376 325.367 186.301 326.441 184.976 326.441 cv
183.651 326.441 182.576 325.367 182.576 324.041 cv
182.576 322.716 183.651 321.641 184.976 321.641 cv
186.301 321.641 187.376 322.716 187.376 324.041 cv
cp
@
202.256 324.041 mo
202.256 325.367 201.181 326.441 199.856 326.441 cv
198.531 326.441 197.456 325.367 197.456 324.041 cv
197.456 322.716 198.531 321.641 199.856 321.641 cv
201.181 321.641 202.256 322.716 202.256 324.041 cv
f
202.256 324.041 mo
202.256 325.367 201.181 326.441 199.856 326.441 cv
198.531 326.441 197.456 325.367 197.456 324.041 cv
197.456 322.716 198.531 321.641 199.856 321.641 cv
201.181 321.641 202.256 322.716 202.256 324.041 cv
cp
@
217.376 324.041 mo
217.376 325.367 216.301 326.441 214.976 326.441 cv
213.651 326.441 212.576 325.367 212.576 324.041 cv
212.576 322.716 213.651 321.641 214.976 321.641 cv
216.301 321.641 217.376 322.716 217.376 324.041 cv
f
217.376 324.041 mo
217.376 325.367 216.301 326.441 214.976 326.441 cv
213.651 326.441 212.576 325.367 212.576 324.041 cv
212.576 322.716 213.651 321.641 214.976 321.641 cv
216.301 321.641 217.376 322.716 217.376 324.041 cv
cp
@
232.496 324.041 mo
232.496 325.367 231.421 326.441 230.096 326.441 cv
228.771 326.441 227.696 325.367 227.696 324.041 cv
227.696 322.716 228.771 321.641 230.096 321.641 cv
231.421 321.641 232.496 322.716 232.496 324.041 cv
f
232.496 324.041 mo
232.496 325.367 231.421 326.441 230.096 326.441 cv
228.771 326.441 227.696 325.367 227.696 324.041 cv
227.696 322.716 228.771 321.641 230.096 321.641 cv
231.421 321.641 232.496 322.716 232.496 324.041 cv
cp
@
247.616 324.041 mo
247.616 325.367 246.541 326.441 245.216 326.441 cv
243.891 326.441 242.816 325.367 242.816 324.041 cv
242.816 322.716 243.891 321.641 245.216 321.641 cv
246.541 321.641 247.616 322.716 247.616 324.041 cv
f
247.616 324.041 mo
247.616 325.367 246.541 326.441 245.216 326.441 cv
243.891 326.441 242.816 325.367 242.816 324.041 cv
242.816 322.716 243.891 321.641 245.216 321.641 cv
246.541 321.641 247.616 322.716 247.616 324.041 cv
cp
@
262.736 324.041 mo
262.736 325.367 261.661 326.441 260.336 326.441 cv
259.011 326.441 257.936 325.367 257.936 324.041 cv
257.936 322.716 259.011 321.641 260.336 321.641 cv
261.661 321.641 262.736 322.716 262.736 324.041 cv
f
262.736 324.041 mo
262.736 325.367 261.661 326.441 260.336 326.441 cv
259.011 326.441 257.936 325.367 257.936 324.041 cv
257.936 322.716 259.011 321.641 260.336 321.641 cv
261.661 321.641 262.736 322.716 262.736 324.041 cv
cp
@
277.856 324.041 mo
277.856 325.367 276.781 326.441 275.456 326.441 cv
274.131 326.441 273.056 325.367 273.056 324.041 cv
273.056 322.716 274.131 321.641 275.456 321.641 cv
276.781 321.641 277.856 322.716 277.856 324.041 cv
f
277.856 324.041 mo
277.856 325.367 276.781 326.441 275.456 326.441 cv
274.131 326.441 273.056 325.367 273.056 324.041 cv
273.056 322.716 274.131 321.641 275.456 321.641 cv
276.781 321.641 277.856 322.716 277.856 324.041 cv
cp
@
292.976 324.041 mo
292.976 325.367 291.901 326.441 290.576 326.441 cv
289.251 326.441 288.176 325.367 288.176 324.041 cv
288.176 322.716 289.251 321.641 290.576 321.641 cv
291.901 321.641 292.976 322.716 292.976 324.041 cv
f
292.976 324.041 mo
292.976 325.367 291.901 326.441 290.576 326.441 cv
289.251 326.441 288.176 325.367 288.176 324.041 cv
288.176 322.716 289.251 321.641 290.576 321.641 cv
291.901 321.641 292.976 322.716 292.976 324.041 cv
cp
@
308.096 324.041 mo
308.096 325.367 307.021 326.441 305.696 326.441 cv
304.371 326.441 303.296 325.367 303.296 324.041 cv
303.296 322.716 304.371 321.641 305.696 321.641 cv
307.021 321.641 308.096 322.716 308.096 324.041 cv
f
308.096 324.041 mo
308.096 325.367 307.021 326.441 305.696 326.441 cv
304.371 326.441 303.296 325.367 303.296 324.041 cv
303.296 322.716 304.371 321.641 305.696 321.641 cv
307.021 321.641 308.096 322.716 308.096 324.041 cv
cp
@
323.216 324.041 mo
323.216 325.367 322.141 326.441 320.816 326.441 cv
319.491 326.441 318.416 325.367 318.416 324.041 cv
318.416 322.716 319.491 321.641 320.816 321.641 cv
322.141 321.641 323.216 322.716 323.216 324.041 cv
f
323.216 324.041 mo
323.216 325.367 322.141 326.441 320.816 326.441 cv
319.491 326.441 318.416 325.367 318.416 324.041 cv
318.416 322.716 319.491 321.641 320.816 321.641 cv
322.141 321.641 323.216 322.716 323.216 324.041 cv
cp
@
338.336 324.041 mo
338.336 325.367 337.261 326.441 335.936 326.441 cv
334.611 326.441 333.536 325.367 333.536 324.041 cv
333.536 322.716 334.611 321.641 335.936 321.641 cv
337.261 321.641 338.336 322.716 338.336 324.041 cv
f
338.336 324.041 mo
338.336 325.367 337.261 326.441 335.936 326.441 cv
334.611 326.441 333.536 325.367 333.536 324.041 cv
333.536 322.716 334.611 321.641 335.936 321.641 cv
337.261 321.641 338.336 322.716 338.336 324.041 cv
cp
@
353.456 324.041 mo
353.456 325.367 352.381 326.441 351.056 326.441 cv
349.731 326.441 348.656 325.367 348.656 324.041 cv
348.656 322.716 349.731 321.641 351.056 321.641 cv
352.381 321.641 353.456 322.716 353.456 324.041 cv
f
353.456 324.041 mo
353.456 325.367 352.381 326.441 351.056 326.441 cv
349.731 326.441 348.656 325.367 348.656 324.041 cv
348.656 322.716 349.731 321.641 351.056 321.641 cv
352.381 321.641 353.456 322.716 353.456 324.041 cv
cp
@
1.5 lw
1 lc
63.9872 280.281 mo
69.0232 303.188 74.0602 335.585 79.0962 349.003 cv
82.4632 357.971 90.8392 359.096 94.2052 360.784 cv
99.2412 363.31 104.278 363.322 109.314 364.16 cv
114.35 364.998 119.387 365.448 124.423 365.812 cv
129.46 366.177 134.496 366.2 139.532 366.349 cv
144.568 366.498 149.605 366.758 154.641 366.707 cv
159.678 366.655 164.714 366.167 169.75 366.038 cv
174.787 365.909 179.823 365.955 184.859 365.931 cv
189.896 365.906 194.932 365.956 199.968 365.894 cv
205.005 365.831 210.041 365.648 215.077 365.556 cv
220.114 365.465 225.15 365.383 230.187 365.344 cv
235.223 365.304 240.259 365.374 245.296 365.32 cv
250.332 365.265 255.368 365.102 260.405 365.016 cv
265.441 364.929 270.477 364.83 275.514 364.8 cv
280.55 364.769 285.586 364.835 290.623 364.832 cv
295.659 364.829 300.695 364.813 305.732 364.782 cv
310.768 364.75 315.804 364.675 320.841 364.645 cv
325.877 364.614 330.913 364.624 335.95 364.597 cv
340.986 364.571 346.023 364.523 351.059 364.486 cv
1 /0 /CSD get_res sepcs
.353 sep
@
66.4156 280.121 mo
66.4156 281.447 65.3406 282.521 64.0156 282.521 cv
62.6906 282.521 61.6156 281.447 61.6156 280.121 cv
61.6156 278.796 62.6906 277.721 64.0156 277.721 cv
65.3406 277.721 66.4156 278.796 66.4156 280.121 cv
f
.75 lw
0 lc
66.4156 280.121 mo
66.4156 281.447 65.3406 282.521 64.0156 282.521 cv
62.6906 282.521 61.6156 281.447 61.6156 280.121 cv
61.6156 278.796 62.6906 277.721 64.0156 277.721 cv
65.3406 277.721 66.4156 278.796 66.4156 280.121 cv
cp
@
81.5356 349.001 mo
81.5356 350.327 80.4606 351.401 79.1356 351.401 cv
77.8106 351.401 76.7356 350.327 76.7356 349.001 cv
76.7356 347.676 77.8106 346.601 79.1356 346.601 cv
80.4606 346.601 81.5356 347.676 81.5356 349.001 cv
f
81.5356 349.001 mo
81.5356 350.327 80.4606 351.401 79.1356 351.401 cv
77.8106 351.401 76.7356 350.327 76.7356 349.001 cv
76.7356 347.676 77.8106 346.601 79.1356 346.601 cv
80.4606 346.601 81.5356 347.676 81.5356 349.001 cv
cp
@
96.6556 360.761 mo
96.6556 362.087 95.5806 363.161 94.2556 363.161 cv
92.9306 363.161 91.8556 362.087 91.8556 360.761 cv
91.8556 359.436 92.9306 358.361 94.2556 358.361 cv
95.5806 358.361 96.6556 359.436 96.6556 360.761 cv
f
96.6556 360.761 mo
96.6556 362.087 95.5806 363.161 94.2556 363.161 cv
92.9306 363.161 91.8556 362.087 91.8556 360.761 cv
91.8556 359.436 92.9306 358.361 94.2556 358.361 cv
95.5806 358.361 96.6556 359.436 96.6556 360.761 cv
cp
@
111.776 364.121 mo
111.776 365.447 110.701 366.521 109.376 366.521 cv
108.051 366.521 106.976 365.447 106.976 364.121 cv
106.976 362.796 108.051 361.721 109.376 361.721 cv
110.701 361.721 111.776 362.796 111.776 364.121 cv
f
111.776 364.121 mo
111.776 365.447 110.701 366.521 109.376 366.521 cv
108.051 366.521 106.976 365.447 106.976 364.121 cv
106.976 362.796 108.051 361.721 109.376 361.721 cv
110.701 361.721 111.776 362.796 111.776 364.121 cv
cp
@
126.896 365.801 mo
126.896 367.127 125.821 368.201 124.496 368.201 cv
123.171 368.201 122.096 367.127 122.096 365.801 cv
122.096 364.476 123.171 363.401 124.496 363.401 cv
125.821 363.401 126.896 364.476 126.896 365.801 cv
f
126.896 365.801 mo
126.896 367.127 125.821 368.201 124.496 368.201 cv
123.171 368.201 122.096 367.127 122.096 365.801 cv
122.096 364.476 123.171 363.401 124.496 363.401 cv
125.821 363.401 126.896 364.476 126.896 365.801 cv
cp
@
142.016 366.281 mo
142.016 367.607 140.941 368.681 139.616 368.681 cv
138.291 368.681 137.216 367.607 137.216 366.281 cv
137.216 364.956 138.291 363.881 139.616 363.881 cv
140.941 363.881 142.016 364.956 142.016 366.281 cv
f
142.016 366.281 mo
142.016 367.607 140.941 368.681 139.616 368.681 cv
138.291 368.681 137.216 367.607 137.216 366.281 cv
137.216 364.956 138.291 363.881 139.616 363.881 cv
140.941 363.881 142.016 364.956 142.016 366.281 cv
cp
@
157.136 366.521 mo
157.136 367.847 156.061 368.921 154.736 368.921 cv
153.411 368.921 152.336 367.847 152.336 366.521 cv
152.336 365.196 153.411 364.121 154.736 364.121 cv
156.061 364.121 157.136 365.196 157.136 366.521 cv
f
157.136 366.521 mo
157.136 367.847 156.061 368.921 154.736 368.921 cv
153.411 368.921 152.336 367.847 152.336 366.521 cv
152.336 365.196 153.411 364.121 154.736 364.121 cv
156.061 364.121 157.136 365.196 157.136 366.521 cv
cp
@
172.256 366.041 mo
172.256 367.367 171.181 368.441 169.856 368.441 cv
168.531 368.441 167.456 367.367 167.456 366.041 cv
167.456 364.716 168.531 363.641 169.856 363.641 cv
171.181 363.641 172.256 364.716 172.256 366.041 cv
f
172.256 366.041 mo
172.256 367.367 171.181 368.441 169.856 368.441 cv
168.531 368.441 167.456 367.367 167.456 366.041 cv
167.456 364.716 168.531 363.641 169.856 363.641 cv
171.181 363.641 172.256 364.716 172.256 366.041 cv
cp
@
187.376 365.801 mo
187.376 367.127 186.301 368.201 184.976 368.201 cv
183.651 368.201 182.576 367.127 182.576 365.801 cv
182.576 364.476 183.651 363.401 184.976 363.401 cv
186.301 363.401 187.376 364.476 187.376 365.801 cv
f
187.376 365.801 mo
187.376 367.127 186.301 368.201 184.976 368.201 cv
183.651 368.201 182.576 367.127 182.576 365.801 cv
182.576 364.476 183.651 363.401 184.976 363.401 cv
186.301 363.401 187.376 364.476 187.376 365.801 cv
cp
@
202.256 365.801 mo
202.256 367.127 201.181 368.201 199.856 368.201 cv
198.531 368.201 197.456 367.127 197.456 365.801 cv
197.456 364.476 198.531 363.401 199.856 363.401 cv
201.181 363.401 202.256 364.476 202.256 365.801 cv
f
202.256 365.801 mo
202.256 367.127 201.181 368.201 199.856 368.201 cv
198.531 368.201 197.456 367.127 197.456 365.801 cv
197.456 364.476 198.531 363.401 199.856 363.401 cv
201.181 363.401 202.256 364.476 202.256 365.801 cv
cp
@
217.376 365.561 mo
217.376 366.887 216.301 367.961 214.976 367.961 cv
213.651 367.961 212.576 366.887 212.576 365.561 cv
212.576 364.236 213.651 363.161 214.976 363.161 cv
216.301 363.161 217.376 364.236 217.376 365.561 cv
f
217.376 365.561 mo
217.376 366.887 216.301 367.961 214.976 367.961 cv
213.651 367.961 212.576 366.887 212.576 365.561 cv
212.576 364.236 213.651 363.161 214.976 363.161 cv
216.301 363.161 217.376 364.236 217.376 365.561 cv
cp
@
232.496 365.321 mo
232.496 366.647 231.421 367.721 230.096 367.721 cv
228.771 367.721 227.696 366.647 227.696 365.321 cv
227.696 363.996 228.771 362.921 230.096 362.921 cv
231.421 362.921 232.496 363.996 232.496 365.321 cv
f
232.496 365.321 mo
232.496 366.647 231.421 367.721 230.096 367.721 cv
228.771 367.721 227.696 366.647 227.696 365.321 cv
227.696 363.996 228.771 362.921 230.096 362.921 cv
231.421 362.921 232.496 363.996 232.496 365.321 cv
cp
@
247.616 365.321 mo
247.616 366.647 246.541 367.721 245.216 367.721 cv
243.891 367.721 242.816 366.647 242.816 365.321 cv
242.816 363.996 243.891 362.921 245.216 362.921 cv
246.541 362.921 247.616 363.996 247.616 365.321 cv
f
247.616 365.321 mo
247.616 366.647 246.541 367.721 245.216 367.721 cv
243.891 367.721 242.816 366.647 242.816 365.321 cv
242.816 363.996 243.891 362.921 245.216 362.921 cv
246.541 362.921 247.616 363.996 247.616 365.321 cv
cp
@
262.736 364.841 mo
262.736 366.167 261.661 367.241 260.336 367.241 cv
259.011 367.241 257.936 366.167 257.936 364.841 cv
257.936 363.516 259.011 362.441 260.336 362.441 cv
261.661 362.441 262.736 363.516 262.736 364.841 cv
f
262.736 364.841 mo
262.736 366.167 261.661 367.241 260.336 367.241 cv
259.011 367.241 257.936 366.167 257.936 364.841 cv
257.936 363.516 259.011 362.441 260.336 362.441 cv
261.661 362.441 262.736 363.516 262.736 364.841 cv
cp
@
277.856 364.601 mo
277.856 365.927 276.781 367.001 275.456 367.001 cv
274.131 367.001 273.056 365.927 273.056 364.601 cv
273.056 363.276 274.131 362.201 275.456 362.201 cv
276.781 362.201 277.856 363.276 277.856 364.601 cv
f
277.856 364.601 mo
277.856 365.927 276.781 367.001 275.456 367.001 cv
274.131 367.001 273.056 365.927 273.056 364.601 cv
273.056 363.276 274.131 362.201 275.456 362.201 cv
276.781 362.201 277.856 363.276 277.856 364.601 cv
cp
@
292.976 364.841 mo
292.976 366.167 291.901 367.241 290.576 367.241 cv
289.251 367.241 288.176 366.167 288.176 364.841 cv
288.176 363.516 289.251 362.441 290.576 362.441 cv
291.901 362.441 292.976 363.516 292.976 364.841 cv
f
292.976 364.841 mo
292.976 366.167 291.901 367.241 290.576 367.241 cv
289.251 367.241 288.176 366.167 288.176 364.841 cv
288.176 363.516 289.251 362.441 290.576 362.441 cv
291.901 362.441 292.976 363.516 292.976 364.841 cv
cp
@
308.096 364.601 mo
308.096 365.927 307.021 367.001 305.696 367.001 cv
304.371 367.001 303.296 365.927 303.296 364.601 cv
303.296 363.276 304.371 362.201 305.696 362.201 cv
307.021 362.201 308.096 363.276 308.096 364.601 cv
f
308.096 364.601 mo
308.096 365.927 307.021 367.001 305.696 367.001 cv
304.371 367.001 303.296 365.927 303.296 364.601 cv
303.296 363.276 304.371 362.201 305.696 362.201 cv
307.021 362.201 308.096 363.276 308.096 364.601 cv
cp
@
323.216 364.601 mo
323.216 365.927 322.141 367.001 320.816 367.001 cv
319.491 367.001 318.416 365.927 318.416 364.601 cv
318.416 363.276 319.491 362.201 320.816 362.201 cv
322.141 362.201 323.216 363.276 323.216 364.601 cv
f
323.216 364.601 mo
323.216 365.927 322.141 367.001 320.816 367.001 cv
319.491 367.001 318.416 365.927 318.416 364.601 cv
318.416 363.276 319.491 362.201 320.816 362.201 cv
322.141 362.201 323.216 363.276 323.216 364.601 cv
cp
@
338.336 364.601 mo
338.336 365.927 337.261 367.001 335.936 367.001 cv
334.611 367.001 333.536 365.927 333.536 364.601 cv
333.536 363.276 334.611 362.201 335.936 362.201 cv
337.261 362.201 338.336 363.276 338.336 364.601 cv
f
338.336 364.601 mo
338.336 365.927 337.261 367.001 335.936 367.001 cv
334.611 367.001 333.536 365.927 333.536 364.601 cv
333.536 363.276 334.611 362.201 335.936 362.201 cv
337.261 362.201 338.336 363.276 338.336 364.601 cv
cp
@
353.456 364.361 mo
353.456 365.687 352.381 366.761 351.056 366.761 cv
349.731 366.761 348.656 365.687 348.656 364.361 cv
348.656 363.036 349.731 361.961 351.056 361.961 cv
352.381 361.961 353.456 363.036 353.456 364.361 cv
f
353.456 364.361 mo
353.456 365.687 352.381 366.761 351.056 366.761 cv
349.731 366.761 348.656 365.687 348.656 364.361 cv
348.656 363.036 349.731 361.961 351.056 361.961 cv
352.381 361.961 353.456 363.036 353.456 364.361 cv
cp
@
1 /0 /CSD get_res sepcs
.651 sep
%ADOBeginSubsetFont: DVYUMU+DengXian-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/DVYUMU+DengXian-GBK-EUC-H 1 GetGlyphDirectory
28609 <001C60D8A8C9B89100E29405032CF540B228E72552> |
!
end
end end
%ADOEndSubsetFont
/DVYUMU+DengXian-GBK-EUC-H-Identity-H findfont [9.12 0 0 -9.12 0 0 ]msf
373.286 396.772 mo
(o\303)sh
373.286 374.665 mo
(o\310o\303)
[4.7998 0 ]xsh
373.286 352.558 mo
(o\304o\303o\303)
[4.7998 4.79977 0 ]xsh
373.286 330.452 mo
(o\304o\310o\303)
[4.7998 4.79977 0 ]xsh
373.286 308.345 mo
(o\305o\303o\303)
[4.7998 4.79977 0 ]xsh
373.286 286.238 mo
(o\305o\310o\303)
[4.7998 4.79977 0 ]xsh
373.286 264.131 mo
(o\306o\303o\303)
[4.7998 4.79977 0 ]xsh
37.0221 396.763 mo
(o\303)sh
30.3098 370.233 mo
(o\303o\301o\310)
[4.79979 1.92062 0 ]xsh
37.0221 343.703 mo
(o\304)sh
30.3098 317.173 mo
(o\304o\301o\310)
[4.79979 1.92062 0 ]xsh
37.0221 290.643 mo
(o\305)sh
30.3098 264.113 mo
(o\305o\301o\310)
[4.79979 1.92062 0 ]xsh
46.5161 406.385 mo
(o\303)sh
122.057 406.385 mo
(o\310)sh
195.236 406.385 mo
(o\304o\303)
[4.7998 0 ]xsh
270.777 406.385 mo
(o\304o\310)
[4.7998 0 ]xsh
346.318 406.385 mo
(o\305o\303)
[4.7998 0 ]xsh
/DVYUMU+DengXian-GBK-EUC-H-Identity-H findfont [0 -10.08 -10.08 0 0 0 ]msf
400.106 349.035 mo
(o\343o\370p\005p\003o\377o\370p\013o\374p\007p\014)
[-5.51984 -5.27997 -3.36072 -5.75977 -2.16013 -5.28 -4.56021 -2.16013 -3.11465 0 ]ysh
23.3556 337.514 mo
(o\337p\002p\006p\006)
[-4.80014 -5.75568 -4.08044 0 ]ysh
/DVYUMU+DengXian-GBK-EUC-H-Identity-H findfont [10.08 0 0 -10.08 0 0 ]msf
194.166 421.19 mo
(o\330p\003p\002o\366o\373)
[5.04007 5.75977 5.75565 4.55923 0 ]xsh
1.5 lw
1 lc
112.601 445.28 mo
131.801 445.28 li
.765011 .551873 0 0 cmyk
@
124.496 445.335 mo
124.496 446.66 123.421 447.734 122.096 447.734 cv
120.771 447.734 119.696 446.66 119.696 445.335 cv
119.696 444.009 120.771 442.935 122.096 442.935 cv
123.421 442.935 124.496 444.009 124.496 445.335 cv
f
.75 lw
0 lc
124.496 445.335 mo
124.496 446.66 123.421 447.734 122.096 447.734 cv
120.771 447.734 119.696 446.66 119.696 445.335 cv
119.696 444.009 120.771 442.935 122.096 442.935 cv
123.421 442.935 124.496 444.009 124.496 445.335 cv
cp
@
1 /0 /CSD get_res sepcs
.651 sep
/DVYUMU+DengXian-GBK-EUC-H-Identity-H findfont [9.12 0 0 -9.12 0 0 ]msf
133.826 447.698 mo
(p\007p\005o\364o\374p\001o\263o\377p\002p\006p\006o\263o\302o\263o\305o\303o\303o\303)
[2.88004 3.12 4.32294 2.15961 4.79988 2.64026 1.91975 5.27956 3.60063 3.5997 2.39859 3.60062 
2.39859 4.7998 4.55994 4.79977 0 ]xsh
1.5 lw
1 lc
207.273 445.28 mo
226.473 445.28 li
.0326238 .622919 .92285 .000610361 cmyk
@
219.296 445.335 mo
219.296 446.66 218.221 447.734 216.896 447.734 cv
215.571 447.734 214.496 446.66 214.496 445.335 cv
214.496 444.009 215.571 442.935 216.896 442.935 cv
218.221 442.935 219.296 444.009 219.296 445.335 cv
f
.75 lw
0 lc
219.296 445.335 mo
219.296 446.66 218.221 447.734 216.896 447.734 cv
215.571 447.734 214.496 446.66 214.496 445.335 cv
214.496 444.009 215.571 442.935 216.896 442.935 cv
218.221 442.935 219.296 444.009 219.296 445.335 cv
cp
@
1 /0 /CSD get_res sepcs
.651 sep
/DVYUMU+DengXian-GBK-EUC-H-Identity-H findfont [9.12 0 0 -9.12 0 0 ]msf
228.498 447.698 mo
(p\011o\364o\377o\374o\367o\263o\377p\002p\006p\006)
[4.08032 4.56006 2.15961 1.91974 5.28055 2.39856 1.92432 5.27957 3.60062 0 ]xsh
1.5 lw
1 lc
275.165 445.28 mo
294.365 445.28 li
1 /0 /CSD get_res sepcs
.353 sep
@
287.216 445.335 mo
287.216 446.66 286.141 447.734 284.816 447.734 cv
283.491 447.734 282.416 446.66 282.416 445.335 cv
282.416 444.009 283.491 442.935 284.816 442.935 cv
286.141 442.935 287.216 444.009 287.216 445.335 cv
f
.75 lw
0 lc
287.216 445.335 mo
287.216 446.66 286.141 447.734 284.816 447.734 cv
283.491 447.734 282.416 446.66 282.416 445.335 cv
282.416 444.009 283.491 442.935 284.816 442.935 cv
286.141 442.935 287.216 444.009 287.216 445.335 cv
cp
@
1 /0 /CSD get_res sepcs
.651 sep
/DVYUMU+DengXian-GBK-EUC-H-Identity-H findfont [9.12 0 0 -9.12 0 0 ]msf
296.39 447.698 mo
(p\003p\003o\377)
[5.2796 5.04343 0 ]xsh
1.25562 250.721 mo
416.556 250.721 li
416.556 458.921 li
1.25562 458.921 li
cp
1 /0 /CSD get_res sepcs
.149 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/DVYUMV+MS-Gothic-90ms-RKSJ-H-Identity-H uf
/DVYUMV+MS-Gothic-90ms-RKSJ-H /CIDFont ur
/DVYUMU+DengXian-GBK-EUC-H-Identity-H uf
/DVYUMU+DengXian-GBK-EUC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
